---
title: "In_class_Ex09"
---

## Getting Started

```{r}
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
options(repos = c(CRAN = "https://cran.rstudio.com/"))
pacman::p_load(SpatialAcc, sf, tidyverse, tmap, ggstatsplot, magrittr, gmp)
```

## Count Number of Points within a Distance

The following code is used to import the ELDERCARE shapefile and transform the CRS:

```{r}
eldercare <- st_read(dsn = "/Users/sharon/OneDrive - Singapore Management University/ISSS626 Data/In_class_Ex/In_class_Ex09/geospatial", layer = "ELDERCARE") %>%
  st_transform(crs = 3414)
```

## Importing Data

Importing geospatial data for OD Matrix:

```{r}
mpsz <- st_read(dsn = "/Users/sharon/OneDrive - Singapore Management University/ISSS626 Data/In_class_Ex/In_class_Ex09/geospatial", layer = "MP14_SUBZONE_NO_SEA_PL") %>%
  st_transform(crs = 3414)

hexagons <- st_read(dsn = "/Users/sharon/OneDrive - Singapore Management University/ISSS626 Data/In_class_Ex/In_class_Ex09/geospatial", layer = "hexagons") %>%
  st_transform(crs = 3414)

eldercare <- st_read(dsn = "/Users/sharon/OneDrive - Singapore Management University/ISSS626 Data/In_class_Ex/In_class_Ex09/geospatial", layer = "ELDERCARE") %>%
  st_transform(crs = 3414)

ODMatrix <- read_csv("/Users/sharon/OneDrive - Singapore Management University/ISSS626 Data/In_class_Ex/In_class_Ex09/aspatial/OD_Matrix.csv", 
                     skip = 0)
```

## Data Cleaning and Updating Attributes

Select attributes and update capacity for eldercare facilities:

```{r}
eldercare <- eldercare %>%
  dplyr::select(fid, ADDRESSPOS) %>%
  dplyr::mutate(capacity = 100)
```

Select attributes and update demand for hexagons:

```{r}
hexagons <- hexagons %>%
  dplyr::select(fid) %>%
  dplyr::mutate(demand = 100)
```

Prepare the distance matrix:

```{r}
distmat <- ODMatrix %>%
  dplyr::select(origin_id, destination_id, total_cost) %>%
  tidyr::spread(destination_id, total_cost) %>%
  dplyr::select(-origin_id)

distmat_km <- as.matrix(distmat / 1000)
```

## Computing Hansen's Accessibility

Calculate accessibility using Hansenâ€™s method:

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand, eldercare$capacity, distmat_km, power = 0.5, family = "Hansen"))

colnames(acc_Hansen) <- "accHansen"
acc_Hansen <- tibble::as_tibble(acc_Hansen)
hexagon_Hansen <- dplyr::bind_cols(hexagons, acc_Hansen)
```

## Visualising Accessibility

Create a visualization of accessibility using the Hansen method:

```{r}
mapex <- st_bbox(hexagons)

tmap_mode("plot")
tm_shape(hexagon_Hansen, bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
  tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

## Statistical Graphic

Join hexagon Hansen data with the MP14 subzone data and create a statistical plot:

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, join = st_intersects)

tryCatch(
  {
    ggbetweenstats(
      data = hexagon_Hansen,
      x = REGION_N,
      y = accHansen,
      type = "p"
    )
  }, 
  error = function(e) {
    message("Error running 'ggbetweenstats': ", e$message)
  }
)
```

