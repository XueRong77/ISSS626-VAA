[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "required_packages &lt;- c(\"sf\", \"tidyverse\", \"spatstat\", \"gganimate\", \"readr\", \"lubridate\", \"ggplot2\", \"spatstat.linnet\")\n\nfor (pkg in required_packages) {\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg, dependencies = TRUE)\n  }\n}\n\nLoading required package: sf\n\n\nWarning: package 'sf' was built under R version 4.2.3\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLoading required package: spatstat\n\nLoading required package: spatstat.data\n\nLoading required package: spatstat.univar\n\nspatstat.univar 3.0-1\n\nLoading required package: spatstat.geom\n\nspatstat.geom 3.3-3\n\nLoading required package: spatstat.random\n\nspatstat.random 3.3-2\n\nLoading required package: spatstat.explore\n\nLoading required package: nlme\n\n\nAttaching package: 'nlme'\n\n\nThe following object is masked from 'package:dplyr':\n\n    collapse\n\n\nspatstat.explore 3.3-2\n\nLoading required package: spatstat.model\n\nLoading required package: rpart\n\nspatstat.model 3.3-1\n\nLoading required package: spatstat.linnet\n\nspatstat.linnet 3.2-2\n\n\nspatstat 3.1-1 \nFor an introduction to spatstat, type 'beginner' \n\n\nLoading required package: gganimate\n\n\nWarning: package 'gganimate' was built under R version 4.2.3\n\n\n\n\n\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(spatstat)\nlibrary(gganimate)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(spatstat.linnet)\nlibrary(caret) # For potential machine learning bonus analysis\n\nLoading required package: lattice\n\n\n\nAttaching package: 'lattice'\n\n\nThe following object is masked from 'package:spatstat.model':\n\n    panel.histogram\n\n\nThe following object is masked from 'package:spatstat.explore':\n\n    panel.histogram\n\n\n\nAttaching package: 'caret'\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(spdep) # For advanced spatial statistics\n\nWarning: package 'spdep' was built under R version 4.2.3\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\n\n\n\n\n\n\n\n# Load road accident data\naccidents &lt;- read_csv(\"data/thai_road_accident_2019_2022.csv\")\n\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Load road network data (assuming GeoJSON format)\nroads &lt;- st_read(\"data/hotosm_tha_roads_lines_geojson.geojson\")\n\nReading layer `hotosm_tha_roads_lines_geojson' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Take-home_Ex/Take-home_Ex01/data/hotosm_tha_roads_lines_geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 2792361 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nGeodetic CRS:  WGS 84\n\n# Filter accidents for BMR and remove missing coordinates\nbmr_regions &lt;- c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Nakhon Pathom\", \"Samut Sakhon\")\n\naccidents_clean &lt;- accidents %&gt;%\n  filter(!is.na(longitude), !is.na(latitude)) %&gt;%\n  filter(province_en %in% bmr_regions)\n\n\n\n\n\n# Convert accidents data to a spatial object with appropriate CRS (WGS84)\naccidents_sf &lt;- st_as_sf(accidents_clean, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n\n\n\n\n# Add derived variables: hour, day of the week, and season\naccidents_sf &lt;- accidents_sf %&gt;%\n  mutate(incident_datetime = as.POSIXct(incident_datetime, format=\"%Y-%m-%d %H:%M:%S\"),\n         hour = hour(incident_datetime),\n         day_of_week = wday(incident_datetime, label = TRUE),\n         season = case_when(\n           month(incident_datetime) %in% c(12, 1, 2) ~ \"Winter\",\n           month(incident_datetime) %in% c(3, 4, 5) ~ \"Summer\",\n           month(incident_datetime) %in% c(6, 7, 8) ~ \"Rainy\",\n           TRUE ~ \"Autumn\"\n         ))\n\n# Create a new severity column based on fatalities and injuries\naccidents_sf$severity &lt;- with(accidents_sf, ifelse(number_of_fatalities &gt; 0, \"High\",\n                                    ifelse(number_of_injuries &gt; 0, \"Medium\", \"Low\")))\n\n\n\n\n\n\n\n\n# Reproject accidents data to UTM Zone 47N (EPSG: 32647)\naccidents_sf_projected &lt;- st_transform(accidents_sf, crs = 32647)\n\n# Extract coordinates and bounding box for spatstat conversion\ncoords &lt;- st_coordinates(accidents_sf_projected)\n\n# Create a spatstat window (bounding box) from the reprojected coordinates\nwindow &lt;- owin(range(coords[, 1]), range(coords[, 2]))\n\n# Convert the data to ppp format (spatstat point pattern object)\naccidents_ppp &lt;- ppp(x = coords[, 1], y = coords[, 2], window = window)\n\nWarning: data contain duplicated points\n\n# Plot the point pattern to confirm\nplot(accidents_ppp, main = \"Road Traffic Accidents in BMR\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Reproject the accidents data to UTM Zone 47N (EPSG: 32647)\naccidents_projected &lt;- st_transform(accidents_sf, crs = 32647)\n\n# Step 2: Extract the coordinates and create a bounding window\naccident_coords &lt;- st_coordinates(accidents_projected)\naccident_window &lt;- owin(xrange = range(accident_coords[, 1]), yrange = range(accident_coords[, 2]))\n\n# Step 3: Convert to ppp object\naccidents_ppp &lt;- ppp(x = accident_coords[, 1], y = accident_coords[, 2], window = accident_window)\n\nWarning: data contain duplicated points\n\naccidents_ppp_unique &lt;- unique.ppp(accidents_ppp)\n\n\n\n# Step 4: Verify the ppp object\nsummary(accidents_ppp_unique)\n\nPlanar point pattern:  11480 points\nAverage intensity 1.076791e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n# Create a Kernel Density Estimation (KDE) map\naccident_density &lt;- density(accidents_ppp_unique, sigma = 1000)\n\n# Plot the density map\nplot(accident_density, main=\"Accident Density in BMR\", col=topo.colors(356))\n\n\n\n\n\n\n\n\nNetwork Spatial Point Pattern Analysis\n\nlibrary(dplyr)\n\nroads_projected &lt;- st_transform(roads, crs = 32647)\n\n# Filter the data to keep only rows where both 'name' and 'name.en' are not empty\nroads_filtered &lt;- roads_projected %&gt;%\n  filter(name != \"\", name.en != \"\", !is.na(name), !is.na(name.en))\n\n# Check how many records remain after filtering\nprint(nrow(roads_filtered))\n\n[1] 71588\n\n\n\n# Load necessary libraries\nlibrary(sf)  # For st_cast and spatial operations\nlibrary(sp)\n\nWarning: package 'sp' was built under R version 4.2.3\n\nlibrary(lwgeom)\n\nWarning: package 'lwgeom' was built under R version 4.2.3\n\n\nLinking to liblwgeom 3.0.0beta1 r16016, GEOS 3.11.0, PROJ 9.1.0\n\n\n\nAttaching package: 'lwgeom'\n\n\nThe following object is masked from 'package:sf':\n\n    st_perimeter\n\nlibrary(spatstat.geom)\nlibrary(spatstat.linnet)\nlibrary(profvis)  # For profiling\n\n# Function to process data in chunks for memory efficiency\nprocess_chunk &lt;- function(start_index, end_index, roads_sp_simplified) {\n  message(paste(\"Processing chunk from\", start_index, \"to\", end_index))\n  \n  # Extract the line segments for the chunk\n  line_segments &lt;- lapply(slot(roads_sp_simplified[start_index:end_index, ], \"lines\"), function(line_obj) {\n    lapply(line_obj@Lines, function(single_line) {\n      single_line@coords  # Extract coordinates\n    })\n  })\n  \n  # Combine the coordinates\n  all_coords &lt;- do.call(rbind, unlist(line_segments, recursive = FALSE))\n  segments &lt;- cbind(all_coords[1:(nrow(all_coords) - 1), ], all_coords[2:nrow(all_coords), ])\n  \n  return(segments)\n}\n\n\n\n  message(\"Starting the process...\")\n\nStarting the process...\n\n    # Step 1: Cast to LINESTRING\n    message(\"Casting to LINESTRING...\")\n\nCasting to LINESTRING...\n\n    roads_linestring &lt;- st_cast(roads_filtered, \"LINESTRING\")\n\nWarning in st_cast.sf(roads_filtered, \"LINESTRING\"): repeating attributes for\nall sub-geometries for which they may not be constant\n\n    message(\"Casting successful.\")\n\nCasting successful.\n\n    # Step 2: Subset the dataset (for testing smaller portions)\n    message(\"Subsetting the dataset for testing...\")\n\nSubsetting the dataset for testing...\n\n    roads_linestring_subset &lt;- roads_linestring[1:500, ]\n    message(\"Subsetting successful.\")\n\nSubsetting successful.\n\n    # Step 3: Ensure geometries are LINESTRING and remove empty geometries\n    message(\"Removing non-LINESTRING and empty geometries...\")\n\nRemoving non-LINESTRING and empty geometries...\n\n    roads_linestring_subset &lt;- roads_linestring_subset[st_geometry_type(roads_linestring_subset) == \"LINESTRING\", ]\n    roads_linestring_subset &lt;- roads_linestring_subset[!st_is_empty(roads_linestring_subset), ]\n    message(\"Empty geometries removed.\")\n\nEmpty geometries removed.\n\n    # Step 4: Simplify the geometries using sf's st_simplify\n    message(\"Simplifying geometries with sf's st_simplify...\")\n\nSimplifying geometries with sf's st_simplify...\n\n    roads_simplified &lt;- st_simplify(roads_linestring_subset, dTolerance = 1000)  # Adjust tolerance as needed\n    message(\"Simplification successful.\")\n\nSimplification successful.\n\n    # Step 5: Convert the simplified sf object to Spatial\n    message(\"Converting simplified sf object to Spatial...\")\n\nConverting simplified sf object to Spatial...\n\n    roads_sp_simplified &lt;- as(roads_simplified, \"Spatial\")\n    message(\"Conversion to Spatial successful.\")\n\nConversion to Spatial successful.\n\n    # Step 6: Process data in chunks to manage memory usage\n    message(\"Processing data in chunks...\")\n\nProcessing data in chunks...\n\n    chunk_size &lt;- 100  # Define chunk size based on memory capacity\n    num_chunks &lt;- ceiling(nrow(roads_sp_simplified) / chunk_size)\n\n    all_segments &lt;- list()  # Initialize list to store results\n\n    for (i in seq(1, nrow(roads_sp_simplified), by = chunk_size)) {\n      end_index &lt;- min(i + chunk_size - 1, nrow(roads_sp_simplified))\n      message(paste(\"Processing chunk\", i, \"to\", end_index))\n      all_segments[[length(all_segments) + 1]] &lt;- process_chunk(i, end_index, roads_sp_simplified)\n    }\n\nProcessing chunk 1 to 100\n\n\nProcessing chunk from 1 to 100\n\n\nProcessing chunk 101 to 200\n\n\nProcessing chunk from 101 to 200\n\n\nProcessing chunk 201 to 300\n\n\nProcessing chunk from 201 to 300\n\n\nProcessing chunk 301 to 400\n\n\nProcessing chunk from 301 to 400\n\n\nProcessing chunk 401 to 500\n\n\nProcessing chunk from 401 to 500\n\n    # Combine all segments after processing\n    message(\"Combining segments...\")\n\nCombining segments...\n\n    final_segments &lt;- do.call(rbind, all_segments)\n\n    # Step 7: Define the spatial window\n    message(\"Defining spatial window...\")\n\nDefining spatial window...\n\n    window &lt;- owin(xrange = range(final_segments[, 1]), yrange = range(final_segments[, 2]))\n\n    # Step 8: Create the psp object using the extracted segments\n    message(\"Creating psp object...\")\n\nCreating psp object...\n\n    psp_object &lt;- psp(\n      x0 = final_segments[, 1],  # Start x-coordinates\n      y0 = final_segments[, 2],  # Start y-coordinates\n      x1 = final_segments[, 3],  # End x-coordinates\n      y1 = final_segments[, 4],  # End y-coordinates\n      window = window            # Define the spatial window\n    )\n    message(\"PSP object creation successful.\")\n\nPSP object creation successful.\n\n    # Step 9: Print the summary of the created psp object\n    message(\"PSP summary...\")\n\nPSP summary...\n\n    print(summary(psp_object))\n\n1001 line segments\nLengths:\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n      0.0     112.0     489.9   71096.3    5342.7 1362532.9 \nTotal length: 71167376.3042794 units  \nLength per unit area: 6.7342387556204e-05 \nAngles (radians):\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.6022  1.4038  1.4411  2.3279  3.1396 \nWindow: rectangle = [418247.1, 1155055.8] x [774937.8, 2209230.1] units\n                    (736800 x 1434000 units)\nWindow area = 1.0568e+12 square units\n\n    # Step 10: Convert the psp object to a linnet object (linear network)\n    message(\"Converting psp object to linnet object...\")\n\nConverting psp object to linnet object...\n\n    linnet_object &lt;- as.linnet(psp_object)\n    message(\"Linnet object conversion successful.\")\n\nLinnet object conversion successful.\n\n    # Step 11: Print the summary of the linnet object to check if everything is correct\n    message(\"Linnet summary...\")\n\nLinnet summary...\n\n    print(summary(linnet_object))\n\nLinear network with 5023 vertices and 9276 lines\nTotal length 71156180 units\nMaximum vertex degree: 6\n[Non-sparse matrix representation]\nNetwork is connected\nDiameter: 1466294 units\nBounding radius: 1104071 units\nNumerical tolerance: 2.542313e-05 units\nEnclosing window: rectangle = [418247.1, 1155055.8] x [774937.8, 2209230.1] \nunits\n\n    # Plot the linear network\nplot(linnet_object, main = \"Linear Network\")\n\n\n\n\n\n\n\n\n\n# Create the linear network\naccident_net &lt;- lpp(accidents_ppp_unique, linnet_object)\n\n# Plot the road network to verify\n# Plot with custom colors and symbols\nplot(accident_net, \n     main = \"Accidents on Road Network in BMR\",\n     pch = 19,           \n     cex = 0.5,          \n     col = \"black\",        \n     lty = 1,            \n     lwd = 2,            \n     col.network = \"blue\")\n\n\n\n\n\n\n\n\nSpatial Clustering (K-Function)\n\n# Apply K-function to analyze clustering on the road network\naccident_net_subset &lt;- accident_net[1:1000]  # Use the first 1000 points\nK_result &lt;- linearK(accident_net_subset)\n\n\n\n# Plot the result of the K-function\nplot(K_result, main=\"K-Function Analysis of Accidents in BMR\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot() +\n  geom_sf(data = roads, color = \"grey\") +\n  geom_sf(data = accidents_sf, aes(color = severity), alpha = 0.5) +\n  theme_minimal() +\n  labs(title = \"Road Traffic Accidents in Bangkok Metropolitan Region\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Create an animated visualization of accidents over time (by hour)\naccident_animation &lt;- ggplot(accidents_sf) +\n  geom_point(aes(x = st_coordinates(accidents_sf)[, 1], \n                 y = st_coordinates(accidents_sf)[, 2], color = severity), alpha = 0.6) +\n  transition_time(hour) +\n  labs(title = 'Accident Distribution Over Time: {frame_time}') +\n  theme_minimal()\n\n# Save the animation as a GIF\nanimate(accident_animation, renderer = gifski_renderer())\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(spatstat.geom)\nlibrary(spatstat)\nlibrary(spatstat.core)\n\nRegistered S3 methods overwritten by 'spatstat.core':\n  method                           from            \n  Ops.msr                          spatstat.model  \n  affine.msr                       spatstat.model  \n  AIC.dppm                         spatstat.model  \n  AIC.kppm                         spatstat.model  \n  AIC.mppm                         spatstat.model  \n  AIC.ppm                          spatstat.model  \n  anova.mppm                                       \n  anova.ppm                                        \n  anova.slrm                                       \n  as.data.frame.bw.optim           spatstat.explore\n  as.data.frame.envelope           spatstat.explore\n  as.data.frame.fv                 spatstat.explore\n  as.function.fv                   spatstat.explore\n  as.function.leverage.ppm         spatstat.model  \n  as.function.rhohat               spatstat.explore\n  as.function.ssf                  spatstat.explore\n  as.im.leverage.ppm               spatstat.model  \n  as.im.scan.test                  spatstat.explore\n  as.im.ssf                        spatstat.explore\n  as.layered.msr                                   \n  as.owin.dppm                     spatstat.model  \n  as.owin.influence.ppm            spatstat.model  \n  as.owin.kppm                     spatstat.model  \n  as.owin.leverage.ppm             spatstat.model  \n  as.owin.msr                      spatstat.model  \n  as.owin.ppm                      spatstat.model  \n  as.owin.quadrattest              spatstat.explore\n  as.owin.slrm                     spatstat.model  \n  as.ppp.influence.ppm             spatstat.model  \n  as.ppp.ssf                       spatstat.explore\n  cbind.fv                         spatstat.explore\n  clusterfield.kppm                spatstat.model  \n  clusterkernel.kppm               spatstat.model  \n  clusterradius.kppm               spatstat.model  \n  clusterradius.zclustermodel      spatstat.model  \n  coef.dppm                        spatstat.model  \n  coef.fii                         spatstat.model  \n  coef.kppm                        spatstat.model  \n  coef.mppm                        spatstat.model  \n  coef.ppm                         spatstat.model  \n  coef.slrm                        spatstat.model  \n  coef.summary.fii                 spatstat.model  \n  coef.summary.kppm                spatstat.model  \n  coef.summary.ppm                 spatstat.model  \n  coef.summary.slrm                spatstat.model  \n  coef.vblogit                     spatstat.model  \n  collapse.anylist                                 \n  collapse.fv                                      \n  compatible.fasp                  spatstat.explore\n  compatible.fv                                    \n  compatible.rat                   spatstat.explore\n  contour.leverage.ppm             spatstat.model  \n  contour.objsurf                  spatstat.model  \n  contour.ssf                      spatstat.explore\n  density.ppp                                      \n  density.ppplist                  spatstat.explore\n  density.psp                      spatstat.explore\n  density.splitppp                 spatstat.explore\n  deriv.fv                                         \n  deviance.ppm                     spatstat.model  \n  deviance.slrm                    spatstat.model  \n  dfbetas.ppm                      spatstat.model  \n  dfbetas.ppmInfluence             spatstat.model  \n  dfbetas.slrm                     spatstat.model  \n  dim.detpointprocfamily           spatstat.model  \n  dim.fasp                         spatstat.explore\n  dim.msr                          spatstat.model  \n  dimnames.fasp                    spatstat.explore\n  dimnames.msr                     spatstat.model  \n  domain.dppm                      spatstat.model  \n  domain.influence.ppm             spatstat.model  \n  domain.kppm                      spatstat.model  \n  domain.leverage.ppm              spatstat.model  \n  domain.msr                       spatstat.model  \n  domain.ppm                       spatstat.model  \n  domain.quadrattest               spatstat.explore\n  domain.slrm                      spatstat.model  \n  extractAIC.dppm                  spatstat.model  \n  extractAIC.kppm                  spatstat.model  \n  extractAIC.mppm                  spatstat.model  \n  extractAIC.ppm                   spatstat.model  \n  extractAIC.slrm                  spatstat.model  \n  family.hackglmmPQL               spatstat.model  \n  family.vblogit                   spatstat.model  \n  [.fasp                           spatstat.explore\n  fitted.dppm                      spatstat.model  \n  fitted.kppm                      spatstat.model  \n  fitted.mppm                      spatstat.model  \n  fitted.ppm                       spatstat.model  \n  fitted.rppm                      spatstat.model  \n  fitted.slrm                      spatstat.model  \n  fixef.mppm                       spatstat.model  \n  flipxy.msr                       spatstat.model  \n  formula.dppm                     spatstat.model  \n  formula.fv                       spatstat.explore\n  formula.hackglmmPQL              spatstat.model  \n  formula.kppm                     spatstat.model  \n  formula.ppm                      spatstat.model  \n  formula.slrm                     spatstat.model  \n  [.fv                             spatstat.explore\n  getCall.mppm                     spatstat.model  \n  harmonise.fv                                     \n  harmonise.msr                                    \n  harmonize.fv                                     \n  image.objsurf                    spatstat.model  \n  image.ssf                        spatstat.explore\n  [.influence.ppm                  spatstat.model  \n  influence.ppm                    spatstat.model  \n  influence.ppmInfluence           spatstat.model  \n  influence.slrm                   spatstat.model  \n  integral.influence.ppm           spatstat.model  \n  integral.leverage.ppm            spatstat.model  \n  integral.msr                     spatstat.model  \n  integral.ssf                     spatstat.explore\n  intensity.detpointprocfamily     spatstat.model  \n  intensity.dppm                   spatstat.model  \n  intensity.ppm                    spatstat.model  \n  intensity.slrm                   spatstat.model  \n  intensity.zclustermodel          spatstat.model  \n  intensity.zgibbsmodel            spatstat.model  \n  is.expandable.ppm                spatstat.model  \n  is.marked.mppm                   spatstat.model  \n  is.marked.msr                    spatstat.model  \n  is.marked.ppm                    spatstat.model  \n  is.marked.slrm                   spatstat.model  \n  is.multitype.mppm                spatstat.model  \n  is.multitype.msr                 spatstat.model  \n  is.multitype.ppm                 spatstat.model  \n  is.multitype.slrm                spatstat.model  \n  is.poisson.exactppm              spatstat.explore\n  is.poisson.interact              spatstat.model  \n  is.poisson.kppm                  spatstat.model  \n  is.poisson.mppm                  spatstat.model  \n  is.poisson.ppm                   spatstat.model  \n  is.poisson.slrm                  spatstat.model  \n  is.poisson.zgibbsmodel           spatstat.model  \n  is.stationary.detpointprocfamily spatstat.model  \n  is.stationary.dppm               spatstat.model  \n  is.stationary.exactppm           spatstat.explore\n  is.stationary.kppm               spatstat.model  \n  is.stationary.ppm                spatstat.model  \n  is.stationary.slrm               spatstat.model  \n  is.stationary.zgibbsmodel        spatstat.model  \n  labels.dppm                      spatstat.model  \n  labels.kppm                      spatstat.model  \n  labels.ppm                       spatstat.model  \n  labels.slrm                      spatstat.model  \n  [.leverage.ppm                   spatstat.model  \n  [.localpcfmatrix                 spatstat.explore\n  logLik.dppm                      spatstat.model  \n  logLik.kppm                      spatstat.model  \n  logLik.mppm                      spatstat.model  \n  logLik.ppm                       spatstat.model  \n  logLik.slrm                      spatstat.model  \n  logLik.vblogit                   spatstat.model  \n  marks.ssf                        spatstat.explore\n  max.ssf                          spatstat.explore\n  mean.leverage.ppm                spatstat.model  \n  min.ssf                          spatstat.explore\n  model.frame.dppm                 spatstat.model  \n  model.frame.kppm                 spatstat.model  \n  model.frame.ppm                  spatstat.model  \n  model.frame.slrm                 spatstat.model  \n  model.matrix.dppm                spatstat.model  \n  model.matrix.ippm                spatstat.model  \n  model.matrix.kppm                spatstat.model  \n  model.matrix.mppm                spatstat.model  \n  model.matrix.ppm                 spatstat.model  \n  model.matrix.slrm                spatstat.model  \n  [.msr                            spatstat.model  \n  nobs.dppm                        spatstat.model  \n  nobs.kppm                        spatstat.model  \n  nobs.mppm                        spatstat.model  \n  nobs.ppm                         spatstat.model  \n  pairs.im                                         \n  pairs.listof                     spatstat.explore\n  pairs.solist                     spatstat.explore\n  persp.leverage.ppm               spatstat.model  \n  persp.objsurf                    spatstat.model  \n  plot.addvar                      spatstat.model  \n  plot.bermantest                  spatstat.explore\n  plot.bw.frac                     spatstat.explore\n  plot.bw.optim                    spatstat.explore\n  plot.cdftest                     spatstat.explore\n  plot.diagppm                     spatstat.model  \n  plot.dppm                        spatstat.model  \n  plot.envelope                    spatstat.explore\n  plot.fasp                        spatstat.explore\n  plot.fii                         spatstat.model  \n  plot.fv                                          \n  plot.influence.ppm               spatstat.model  \n  plot.kppm                                        \n  plot.laslett                     spatstat.explore\n  plot.leverage.ppm                spatstat.model  \n  plot.localpcfmatrix              spatstat.explore\n  plot.lurk                        spatstat.model  \n  plot.minconfit                   spatstat.model  \n  plot.mppm                        spatstat.model  \n  plot.msr                         spatstat.model  \n  plot.objsurf                     spatstat.model  \n  plot.parres                      spatstat.model  \n  plot.plotpairsim                 spatstat.explore\n  plot.plotppm                     spatstat.model  \n  plot.ppm                         spatstat.model  \n  plot.profilepl                                   \n  plot.qqppm                                       \n  plot.quadrattest                                 \n  plot.rho2hat                     spatstat.explore\n  plot.rhohat                      spatstat.explore\n  plot.rppm                                        \n  plot.scan.test                   spatstat.explore\n  plot.slrm                        spatstat.model  \n  plot.spatialcdf                  spatstat.explore\n  plot.ssf                         spatstat.explore\n  plot.studpermutest                               \n  predict.dppm                     spatstat.model  \n  predict.exactppm                 spatstat.explore\n  predict.kppm                     spatstat.model  \n  predict.mppm                                     \n  predict.ppm                                      \n  predict.profilepl                spatstat.model  \n  predict.rho2hat                  spatstat.explore\n  predict.rhohat                                   \n  predict.rppm                     spatstat.model  \n  predict.slrm                     spatstat.model  \n  predict.vblogit                                  \n  predict.zclustermodel            spatstat.model  \n  print.addvar                     spatstat.model  \n  print.bt.frame                   spatstat.model  \n  print.bw.frac                    spatstat.explore\n  print.bw.optim                   spatstat.explore\n  print.densityfun                 spatstat.explore\n  print.detpointprocfamily         spatstat.model  \n  print.detpointprocfamilyfun      spatstat.model  \n  print.diagppm                    spatstat.model  \n  print.dppm                       spatstat.model  \n  print.envelope                   spatstat.explore\n  print.exactppm                   spatstat.explore\n  print.fasp                       spatstat.explore\n  print.fii                        spatstat.model  \n  print.fv                                         \n  print.fvfun                      spatstat.explore\n  print.hasenvelope                spatstat.explore\n  print.hierarchicalordering       spatstat.model  \n  print.influence.ppm              spatstat.model  \n  print.interact                   spatstat.model  \n  print.intermaker                 spatstat.model  \n  print.isf                        spatstat.model  \n  print.kppm                       spatstat.model  \n  print.laslett                    spatstat.explore\n  print.leverage.ppm               spatstat.model  \n  print.localpcfmatrix             spatstat.explore\n  print.lurk                       spatstat.model  \n  print.minconfit                  spatstat.model  \n  print.mppm                       spatstat.model  \n  print.msr                        spatstat.model  \n  print.objsurf                    spatstat.model  \n  print.parres                     spatstat.model  \n  print.plotpairsim                spatstat.explore\n  print.plotppm                    spatstat.model  \n  print.ppm                        spatstat.model  \n  print.profilepl                  spatstat.model  \n  print.qqppm                      spatstat.model  \n  print.quadrattest                spatstat.explore\n  print.rat                        spatstat.explore\n  print.rho2hat                    spatstat.explore\n  print.rhohat                     spatstat.explore\n  print.rppm                       spatstat.model  \n  print.slrm                       spatstat.model  \n  print.Smoothfun                  spatstat.explore\n  print.ssf                        spatstat.explore\n  print.summary.dppm               spatstat.model  \n  print.summary.fii                                \n  print.summary.kppm               spatstat.model  \n  print.summary.mppm               spatstat.model  \n  print.summary.objsurf            spatstat.model  \n  print.summary.ppm                spatstat.model  \n  print.summary.slrm               spatstat.model  \n  print.summary.ssf                spatstat.explore\n  print.vblogit                    spatstat.model  \n  print.zclustermodel                              \n  print.zgibbsmodel                spatstat.model  \n  prune.rppm                       spatstat.model  \n  quantile.density                                 \n  ranef.mppm                       spatstat.model  \n  range.ssf                        spatstat.explore\n  [.rat                            spatstat.explore\n  reach.detpointprocfamily         spatstat.model  \n  reach.dppm                       spatstat.model  \n  reach.fii                        spatstat.model  \n  reach.interact                   spatstat.model  \n  reach.kppm                       spatstat.model  \n  reach.ppm                        spatstat.model  \n  reach.slrm                       spatstat.model  \n  reach.zclustermodel              spatstat.model  \n  rescale.msr                      spatstat.model  \n  residuals.dppm                   spatstat.model  \n  residuals.kppm                   spatstat.model  \n  residuals.mppm                   spatstat.model  \n  residuals.ppm                    spatstat.model  \n  residuals.slrm                   spatstat.model  \n  rmhmodel.ppm                     spatstat.model  \n  rmh.ppm                          spatstat.model  \n  rotate.msr                       spatstat.model  \n  scalardilate.msr                 spatstat.model  \n  shift.influence.ppm              spatstat.model  \n  shift.leverage.ppm               spatstat.model  \n  shift.msr                        spatstat.model  \n  shift.quadrattest                spatstat.explore\n  simulate.detpointprocfamily      spatstat.model  \n  simulate.dppm                    spatstat.model  \n  simulate.kppm                    spatstat.model  \n  simulate.mppm                    spatstat.model  \n  simulate.ppm                     spatstat.model  \n  simulate.profilepl               spatstat.model  \n  simulate.rhohat                  spatstat.explore\n  simulate.slrm                    spatstat.model  \n  split.msr                        spatstat.model  \n  [.ssf                            spatstat.explore\n  summary.dppm                     spatstat.model  \n  summary.envelope                 spatstat.explore\n  summary.fii                      spatstat.model  \n  summary.kppm                     spatstat.model  \n  summary.mppm                     spatstat.model  \n  summary.msr                      spatstat.model  \n  summary.objsurf                  spatstat.model  \n  summary.ppm                                      \n  summary.profilepl                spatstat.model  \n  summary.slrm                     spatstat.model  \n  summary.ssf                      spatstat.explore\n  summary.vblogit                  spatstat.model  \n  terms.dppm                       spatstat.model  \n  terms.kppm                       spatstat.model  \n  terms.mppm                       spatstat.model  \n  terms.ppm                        spatstat.model  \n  terms.slrm                       spatstat.model  \n  unitname.dppm                    spatstat.model  \n  unitname.kppm                    spatstat.model  \n  unitname.minconfit               spatstat.model  \n  unitname.msr                     spatstat.model  \n  unitname.ppm                     spatstat.model  \n  unitname.slrm                    spatstat.model  \n  unmark.ssf                       spatstat.explore\n  unstack.msr                      spatstat.model  \n  update.detpointprocfamily        spatstat.model  \n  update.interact                  spatstat.model  \n  update.ippm                                      \n  update.kppm                      spatstat.model  \n  update.msr                       spatstat.model  \n  update.ppm                                       \n  update.slrm                      spatstat.model  \n  vcov.kppm                        spatstat.model  \n  vcov.mppm                                        \n  vcov.ppm                                         \n  vcov.slrm                        spatstat.model  \n  Window.dppm                      spatstat.model  \n  Window.influence.ppm             spatstat.model  \n  Window.kppm                      spatstat.model  \n  Window.leverage.ppm              spatstat.model  \n  Window.msr                       spatstat.model  \n  Window.ppm                       spatstat.model  \n  Window.quadrattest               spatstat.explore\n  Window.slrm                      spatstat.model  \n  with.fv                          spatstat.explore\n  with.msr                         spatstat.model  \n  with.ssf                         spatstat.explore\n  $&lt;-.fv                           spatstat.explore\n  coef&lt;-.fii                       spatstat.model  \n  dimnames&lt;-.fasp                  spatstat.explore\n  [&lt;-.fv                           spatstat.explore\n  marks&lt;-.ssf                      spatstat.explore\n  names&lt;-.fv                       spatstat.explore\n  unitname&lt;-.dppm                  spatstat.model  \n  unitname&lt;-.kppm                  spatstat.model  \n  unitname&lt;-.minconfit             spatstat.model  \n  unitname&lt;-.msr                   spatstat.model  \n  unitname&lt;-.ppm                   spatstat.model  \n  unitname&lt;-.slrm                  spatstat.model  \n\n\nspatstat.core 2.4-4.010\n\n\n\nAttaching package: 'spatstat.core'\n\n\nThe following object is masked from 'package:lattice':\n\n    panel.histogram\n\n\nThe following objects are masked from 'package:spatstat.model':\n\n    [.influence.ppm, [.leverage.ppm, [.msr, accumulateStatus,\n    active.interactions, adaptcoef, addvar, affine.msr, AIC.dppm,\n    AIC.kppm, AIC.mppm, AIC.ppm, anova.mppm, anova.ppm, anova.slrm,\n    areadelta2, AreaInter, as.function.leverage.ppm, as.fv.dppm,\n    as.fv.kppm, as.fv.minconfit, as.im.leverage.ppm, as.interact,\n    as.interact.fii, as.interact.interact, as.interact.ppm,\n    as.interact.zgibbsmodel, as.isf, as.isf.zgibbsmodel,\n    as.layered.msr, as.owin.dppm, as.owin.influence.ppm, as.owin.kppm,\n    as.owin.leverage.ppm, as.owin.msr, as.owin.ppm, as.owin.slrm,\n    as.ppm, as.ppm.dppm, as.ppm.kppm, as.ppm.ppm, as.ppm.profilepl,\n    as.ppm.rppm, as.ppp.influence.ppm, auc.kppm, auc.ppm, auc.slrm,\n    augment.msr, BadGey, bc, bc.ppm, berman.test.ppm, bigvaluerule,\n    blankcoefnames, bt.frame, cannot.update, cauchy.estK,\n    cauchy.estpcf, cdf.test.mppm, cdf.test.ppm, cdf.test.slrm,\n    check.separable, closepaircounts, clusterfield.kppm, clusterfit,\n    clusterkernel.kppm, clusterradius.kppm,\n    clusterradius.zclustermodel, coef.dppm, coef.fii, coef.kppm,\n    coef.mppm, coef.ppm, coef.slrm, coef.summary.fii,\n    coef.summary.kppm, coef.summary.ppm, coef.summary.slrm,\n    coef.vblogit, coef&lt;-.fii, compareFit, Concom, condSimCox,\n    contour.leverage.ppm, contour.objsurf, crosspaircounts,\n    damaged.ppm, data.mppm, data.ppm, deltasuffstat,\n    detpointprocfamilyfun, deviance.ppm, deviance.slrm, dfbetas.ppm,\n    dfbetas.ppmInfluence, dfbetas.slrm, dffit, dffit.ppm, dffit.slrm,\n    diagnose.ppm, diagnose.ppm.engine, DiggleGatesStibbard,\n    DiggleGratton, dim.detpointprocfamily, dim.msr, dimnames.msr,\n    domain.dppm, domain.influence.ppm, domain.kppm,\n    domain.leverage.ppm, domain.msr, domain.ppm, domain.slrm,\n    doMultiStraussHard, dppapproxkernel, dppapproxpcf, dppBessel,\n    dppCauchy, dppDpcf, dppeigen, dppGauss, dppkernel, dppm, dppMatern,\n    dppmFixAlgorithm, dppmFixIntensity, dppparbounds, dppPowerExp,\n    DPPSaddle, DPPSaddlePairwise, dppspecden, dppspecdenrange, dummify,\n    dummy.ppm, eem, eem.ppm, eem.slrm, effectfun, emend, emend.ppm,\n    emend.slrm, envelope.kppm, envelope.ppm, envelope.slrm, equalpairs,\n    evalInteraction, evalInterEngine, evalPairPotential,\n    evalPairwiseTerm, exactMPLEstrauss, expandDot, extractAIC.dppm,\n    extractAIC.kppm, extractAIC.mppm, extractAIC.ppm, extractAIC.slrm,\n    fakefii, family.hackglmmPQL, family.vblogit, fii, Fiksel,\n    fill.coefs, findCovariate, fitin, fitin.ppm, fitin.profilepl,\n    fitted.dppm, fitted.kppm, fitted.mppm, fitted.ppm, fitted.rppm,\n    fitted.slrm, fixef.mppm, flipxy.msr, forbid.logi, formula.dppm,\n    formula.hackglmmPQL, formula.kppm, formula.ppm, formula.slrm, Gcom,\n    getCall.mppm, getdataname, getglmdata, getglmfit, getglmsubset,\n    getppmdatasubset, getppmOriginalCovariates, Geyer, geyercounts,\n    geyerdelta2, GLMpredict, Gres, hackglmmPQL, Hardcore, hardcoredist,\n    hardcoredist.fii, hardcoredist.ppm, harmonic, harmonise.msr,\n    has.offset, has.offset.term, hasglmfit, hierarchicalordering,\n    HierHard, hiermat, hierpair.family, HierStrauss, HierStraussHard,\n    ho.engine, Hybrid, hybrid.family, ic, ic.kppm, ic.ppm,\n    illegal.iformula, image.objsurf, impliedcoefficients,\n    impliedpresence, improve.kppm, influence.ppm,\n    influence.ppmInfluence, influence.slrm, inforder.family,\n    instantiate.interact, integral.influence.ppm,\n    integral.leverage.ppm, integral.msr, intensity.detpointprocfamily,\n    intensity.dppm, intensity.ppm, intensity.slrm,\n    intensity.zclustermodel, intensity.zgibbsmodel,\n    interactionfamilyname, interactionorder, interactionorder.fii,\n    interactionorder.interact, interactionorder.isf,\n    interactionorder.ppm, interactionorder.zgibbsmodel, intermaker,\n    ippm, is.dppm, is.expandable.ppm, is.hybrid, is.hybrid.interact,\n    is.hybrid.ppm, is.interact, is.kppm, is.lppm, is.marked.mppm,\n    is.marked.msr, is.marked.ppm, is.marked.slrm, is.mppm,\n    is.multitype.mppm, is.multitype.msr, is.multitype.ppm,\n    is.multitype.slrm, is.poisson.interact, is.poisson.kppm,\n    is.poisson.mppm, is.poisson.ppm, is.poisson.slrm,\n    is.poisson.zgibbsmodel, is.ppm, is.slrm,\n    is.stationary.detpointprocfamily, is.stationary.dppm,\n    is.stationary.kppm, is.stationary.ppm, is.stationary.slrm,\n    is.stationary.zgibbsmodel, Kcom, killinteraction, Kmodel,\n    Kmodel.detpointprocfamily, Kmodel.dppm, Kmodel.kppm, Kmodel.ppm,\n    Kmodel.slrm, Kmodel.zclustermodel, Kpcf.kppm, kppm, kppm.formula,\n    kppm.ppp, kppm.quad, kppmCLadap, kppmComLik, kppmMinCon,\n    kppmPalmLik, Kres, labels.dppm, labels.kppm, labels.ppm,\n    labels.slrm, LambertW, LennardJones, leverage, leverage.ppm,\n    leverage.ppmInfluence, leverage.slrm, lgcp.estK, lgcp.estpcf,\n    logi.engine, logLik.dppm, logLik.kppm, logLik.mppm, logLik.ppm,\n    logLik.slrm, logLik.vblogit, LurkEngine, lurking, lurking.mppm,\n    lurking.ppm, lurking.ppp, mapInterVars, matclust.estK,\n    matclust.estpcf, Mayer, mean.leverage.ppm, measureContinuous,\n    measureDiscrete, measureNegative, measurePositive,\n    measureVariation, mincontrast, model.covariates, model.depends,\n    model.frame.dppm, model.frame.kppm, model.frame.ppm,\n    model.frame.slrm, model.images, model.images.dppm,\n    model.images.kppm, model.images.ppm, model.images.slrm,\n    model.is.additive, model.matrix.dppm, model.matrix.ippm,\n    model.matrix.kppm, model.matrix.mppm, model.matrix.ppm,\n    model.matrix.slrm, model.se.image, modelFrameGam, mpl.engine,\n    mpl.get.covariates, mpl.prepare, mpl.usable, mppm, msr, MultiHard,\n    MultiStrauss, MultiStraussHard, newformula,\n    newstyle.coeff.handling, nndcumfun, no.trend.ppm, nobs.dppm,\n    nobs.kppm, nobs.mppm, nobs.ppm, npfun, objsurf, objsurf.dppm,\n    objsurf.kppm, objsurf.minconfit, objsurfEngine, Ops.msr,\n    optimConverged, optimNsteps, optimStatus, Ord, ord.family,\n    OrdThresh, outdated.interact, oversize.quad, PairPiece,\n    PairPotentialType, pairsat.family, Pairwise, pairwise.family,\n    panel.contour, panel.histogram, panel.image, parameters,\n    parameters.dppm, parameters.fii, parameters.interact,\n    parameters.kppm, parameters.ppm, parameters.profilepl,\n    parameters.slrm, parres, partialModelMatrix, pcfmodel,\n    pcfmodel.detpointprocfamily, pcfmodel.dppm, pcfmodel.kppm,\n    pcfmodel.ppm, pcfmodel.slrm, pcfmodel.zclustermodel, Penttinen,\n    persp.leverage.ppm, persp.objsurf, plot.addvar, plot.diagppm,\n    plot.dppm, plot.fii, plot.influence.ppm, plot.kppm,\n    plot.leverage.ppm, plot.lurk, plot.minconfit, plot.mppm, plot.msr,\n    plot.objsurf, plot.parres, plot.plotppm, plot.ppm, plot.profilepl,\n    plot.qqppm, plot.rppm, plot.slrm, ploterodeimage, ploterodewin,\n    PoisSaddle, PoisSaddleArea, PoisSaddleGeyer, PoisSaddlePairwise,\n    Poisson, polynom, ppm, ppm.default, ppm.formula, ppm.ppp, ppm.quad,\n    ppmCovariates, ppmDerivatives, ppmInfluence, ppmInfluenceEngine,\n    PPMmodelmatrix, predict.dppm, predict.kppm, predict.mppm,\n    predict.ppm, predict.profilepl, predict.rppm, predict.slrm,\n    predict.vblogit, predict.zclustermodel, print.addvar,\n    print.bt.frame, print.detpointprocfamily,\n    print.detpointprocfamilyfun, print.diagppm, print.dppm, print.fii,\n    print.hierarchicalordering, print.influence.ppm, print.interact,\n    print.intermaker, print.isf, print.kppm, print.leverage.ppm,\n    print.lurk, print.minconfit, print.mppm, print.msr, print.objsurf,\n    print.parres, print.plotppm, print.ppm, print.profilepl,\n    print.qqppm, print.rppm, print.slrm, print.summary.dppm,\n    print.summary.fii, print.summary.kppm, print.summary.mppm,\n    print.summary.objsurf, print.summary.ppm, print.summary.slrm,\n    print.vblogit, print.zclustermodel, print.zgibbsmodel, printStatus,\n    printStatusList, profilepl, project.ppm, prune.rppm, pseudoR2,\n    pseudoR2.ppm, pseudoR2.slrm, psib, psib.kppm, psst, psstA, psstG,\n    qqplot.ppm, quad.mppm, quad.ppm, quadBlockSizes, quadrat.test.mppm,\n    quadrat.test.ppm, quadrat.test.slrm, ranef.mppm, rdpp,\n    reach.detpointprocfamily, reach.dppm, reach.fii, reach.interact,\n    reach.kppm, reach.ppm, reach.slrm, reach.zclustermodel,\n    reduceformula, reincarnate.interact, relrisk.ppm, repul,\n    repul.dppm, rescale.msr, resid1panel, resid1plot, resid4plot,\n    residuals.dppm, residuals.kppm, residuals.mppm, residuals.ppm,\n    residuals.slrm, response, response.dppm, response.glm,\n    response.kppm, response.lm, response.mppm, response.ppm,\n    response.slrm, rex, rhohat.ppm, rhohat.slrm, rmh.ppm, rmhmodel.ppm,\n    roc.kppm, roc.ppm, roc.slrm, rotate.msr, rppm, SaddleApprox,\n    safeFiniteValue, safePositiveValue, SatPiece, Saturated,\n    scalardilate.msr, shift.influence.ppm, shift.leverage.ppm,\n    shift.msr, signalStatus, simulate.detpointprocfamily,\n    simulate.dppm, simulate.kppm, simulate.mppm, simulate.ppm,\n    simulate.profilepl, simulate.slrm, slr.prepare,\n    slrAssemblePixelData, slrm, slrmInfluence, Smooth.influence.ppm,\n    Smooth.leverage.ppm, Smooth.msr, Softcore, sp.foundclass,\n    sp.foundclasses, spatialCovariateEvidence.ppm,\n    spatialCovariateEvidence.slrm, spatstatDPPModelInfo, split.msr,\n    splitHybridInteraction, Strauss, strausscounts, StraussHard,\n    stripGLMM, subfits, subfits.new, subfits.old, suffloc, suffstat,\n    suffstat.generic, suffstat.poisson, summary.dppm, summary.fii,\n    summary.kppm, summary.mppm, summary.msr, summary.objsurf,\n    summary.ppm, summary.profilepl, summary.slrm, summary.vblogit,\n    terms.dppm, terms.kppm, terms.mppm, terms.ppm, terms.slrm,\n    thomas.estK, thomas.estpcf, totalVariation, triplet.family,\n    Triplets, tweak.coefs, unitname.dppm, unitname.kppm,\n    unitname.minconfit, unitname.msr, unitname.ppm, unitname.slrm,\n    unitname&lt;-.dppm, unitname&lt;-.kppm, unitname&lt;-.minconfit,\n    unitname&lt;-.msr, unitname&lt;-.ppm, unitname&lt;-.slrm, unstack.msr,\n    update.detpointprocfamily, update.interact, update.ippm,\n    update.kppm, update.msr, update.ppm, update.slrm, valid,\n    valid.detpointprocfamily, valid.ppm, valid.slrm, varcount,\n    varcountEngine, vargamma.estK, vargamma.estpcf, vcov.kppm,\n    vcov.mppm, vcov.ppm, vcov.slrm, versionstring.interact,\n    versionstring.ppm, Window.dppm, Window.influence.ppm, Window.kppm,\n    Window.leverage.ppm, Window.msr, Window.ppm, Window.slrm,\n    windows.mppm, with.msr, zclustermodel, zgibbsmodel\n\n\nThe following objects are masked from 'package:spatstat.explore':\n\n    [.fasp, [.fv, [.localpcfmatrix, [.rat, [.ssf, [&lt;-.fv, $&lt;-.fv,\n    adaptive.density, adjust.ratfv, allstats, alltypes, ang2rad,\n    apply.ssf, as.data.frame.bw.optim, as.data.frame.envelope,\n    as.data.frame.fv, as.function.fv, as.function.rhohat,\n    as.function.ssf, as.fv, as.fv.bw.optim, as.fv.data.frame,\n    as.fv.fasp, as.fv.fv, as.fv.matrix, as.im.scan.test, as.im.ssf,\n    as.owin.quadrattest, as.ppp.ssf, assemble.plot.objects, auc,\n    auc.ppp, bandwidth.is.infinite, BartCalc, berman.test,\n    berman.test.ppp, bermantestCalc, bermantestEngine, bind.fv,\n    bind.ratfv, bits.envelope, bits.test, blur, bw.CvL, bw.CvLHeat,\n    bw.diggle, bw.frac, bw.optim, bw.pcf, bw.ppl, bw.pplHeat,\n    bw.relrisk, bw.scott, bw.scott.iso, bw.smoothppp, bw.stoyan,\n    calc.DR, calc.NNIR, calc.SAVE, calc.SIR, calc.TSE, cbind.fv,\n    cdf.test, cdf.test.ppp, censtimeCDFest, check.testfun, circdensity,\n    circticks, clarkevans, clarkevans.test, clarkevansCalc, clusterset,\n    collapse.anylist, collapse.fv, compatible.fasp, compatible.fv,\n    compatible.rat, compileCDF, compileK, compilepcf, conform.ratfv,\n    contour.ssf, cor.im, cov.im, CressieReadName, CressieReadStatistic,\n    CressieReadSymbol, cutoff2Dkernel, CVforPCF, dclf.progress,\n    dclf.sigtrace, dclf.test, density.ppp, density.ppplist,\n    density.psp, density.splitppp, densityAdaptiveKernel.ppp,\n    densitycrossEngine, densityfun, densityfun.ppp, densityHeat,\n    densityHeat.ppp, densitypointsEngine, densityVoronoi,\n    densityVoronoi.ppp, deriv.fv, Deviation, dg.envelope, dg.progress,\n    dg.sigtrace, dg.test, digestCovariates, digital.volume, dim.fasp,\n    dimhat, dimnames.fasp, dimnames&lt;-.fasp, distcdf, distributecbind,\n    domain.quadrattest, edge.Ripley, edge.Trans, Emark, envelope,\n    envelope.envelope, envelope.hasenvelope, envelope.matrix,\n    envelope.pp3, envelope.ppp, envelopeArray, envelopeEngine,\n    envelopeProgressData, envelopeTest, eval.fasp, eval.fv, evalCovar,\n    evaluate2Dkernel, evaluateCovariate, evaluateCovariateAtPixels,\n    evaluateCovariateAtPoints, exactppm, ExpSmoothLog,\n    extractAtomicQtests, f3Cengine, f3engine, F3est, fasp, Fest,\n    Fhazard, findbestlegendpos, findcbind, Finhom, flatfname,\n    FmultiInhom, FormatFaspFormulae, formula.fv, formula&lt;-,\n    formula&lt;-.fv, fryplot, frypoints, fv, fvexprmap, fvlabelmap,\n    fvlabels, fvlabels&lt;-, fvlegend, fvnames, fvnames&lt;-, g3Cengine,\n    g3engine, G3est, Gcross, Gdot, Gest, getSumFun, Gfox, Ginhom,\n    Gmulti, GmultiInhom, good.correction.K, harmonise.fv, harmonize.fv,\n    hasenvelope, Hest, hopskel, hopskel.test, hotbox, idw, Iest,\n    image.ssf, implemented.for.K, increment.fv, integral.ssf,\n    is.atomicQtest, is.poisson.exactppm, is.scov,\n    is.stationary.exactppm, Jcross, Jdot, Jest, Jfox, Jinhom, Jmulti,\n    k3engine, K3est, Kborder.engine, Kcross, Kcross.inhom, Kdot,\n    Kdot.inhom, Kest, Kest.fft, Kinhom, Kmark, Kmeasure, Kmulti,\n    Kmulti.inhom, Knone.engine, Kount, Krect.engine, Kscaled, Ksector,\n    Kwtsum, laslett, Lcross, Lcross.inhom, Ldot, Ldot.inhom, Lest,\n    Linhom, localK, localKcross, localKcross.inhom, localKdot,\n    localKengine, localKinhom, localKmultiEngine, localL, localLcross,\n    localLcross.inhom, localLdot, localLinhom, localpcf,\n    localpcfengine, localpcfinhom, localpcfmatrix, lohboot,\n    lookup2DkernelInfo, Lscaled, mad.progress, mad.sigtrace, mad.test,\n    makefvlabel, markconnect, markcorr, markcorrint, markcrosscorr,\n    markmarkscatter, markmean, marks.ssf, marks&lt;-.ssf, marktable,\n    markvar, markvario, maskLaslett, match2DkernelName, max.ssf,\n    mctest.progress, mctest.sigtrace, mctestSigtraceEngine, meanlistfv,\n    min.ssf, miplot, names&lt;-.fv, nearest.neighbour, nnclean,\n    nnclean.pp3, nnclean.ppp, nncleanEngine, nncorr, nndensity,\n    nndensity.ppp, nnmean, nnorient, nnvario, pairMean, pairorient,\n    pairs.im, pairs.listof, pairs.solist, panel.contour,\n    panel.histogram, panel.image, pcf, pcf.fasp, pcf.fv, pcf.ppp,\n    pcf3engine, pcf3est, pcfcross, pcfcross.inhom, pcfdot,\n    pcfdot.inhom, pcfinhom, pcfmulti, pcfmulti.inhom, plot.bermantest,\n    plot.bw.frac, plot.bw.optim, plot.cdftest, plot.envelope,\n    plot.fasp, plot.fv, plot.laslett, plot.localpcfmatrix,\n    plot.plotpairsim, plot.quadrattest, plot.rho2hat, plot.rhohat,\n    plot.scan.test, plot.spatialcdf, plot.ssf, plot.studpermutest,\n    polyLaslett, pool, pool.anylist, pool.envelope, pool.fasp, pool.fv,\n    pool.quadrattest, pool.rat, PPversion, predict.exactppm,\n    predict.rho2hat, predict.rhohat, prefixfv, print.bw.frac,\n    print.bw.optim, print.densityfun, print.envelope, print.exactppm,\n    print.fasp, print.fv, print.fvfun, print.hasenvelope,\n    print.laslett, print.localpcfmatrix, print.plotpairsim,\n    print.quadrattest, print.rat, print.rho2hat, print.rhohat,\n    print.Smoothfun, print.ssf, print.summary.ssf, QQversion,\n    quadrat.test, quadrat.test.ppp, quadrat.test.quadratcount,\n    quadrat.test.splitppp, quadrat.testEngine, range.ssf, rat, ratfv,\n    rebadge.as.crossfun, rebadge.as.dotfun, rebadge.fv, rebadgeLabels,\n    reconcile.fv, rectcontact, RelevantDeviation, reload.or.compute,\n    relrisk, relrisk.ppp, rename.fv, resolve.2D.kernel,\n    resolve.foxall.window, resolve.lambda, resolve.reciplambda,\n    resolveEinfo, rho2hat, rhohat, rhohat.ppp, rhohat.quad, rhohatCalc,\n    rhohatEngine, rmax.Rigid, rmax.Ripley, rmax.rule, rmax.Trans, roc,\n    roc.ppp, rocData, rocModel, rose, rose.default, rose.density,\n    rose.fv, rose.histogram, roseContinuous, rotmean, scan.test,\n    scanBinomLRTS, scanLRTS, scanmeasure, scanmeasure.im,\n    scanmeasure.ppp, scanPoisLRTS, sdr, sdr.ppp, sdrPredict,\n    second.moment.calc, second.moment.engine, segregation.test,\n    segregation.test.ppp, sewpcf, sewsmod, sharpen, sharpen.ppp,\n    shift.quadrattest, simulate.rhohat, simulrecipe, Smooth, Smooth.fv,\n    Smooth.im, Smooth.ppp, Smooth.solist, Smooth.ssf,\n    smoothcrossEngine, Smoothfun, Smoothfun.ppp, smoothpointsEngine,\n    spatcov, spatialcdf, spatialCDFframe, spatialCDFtest,\n    spatialCDFtestCalc, spatialCovariateEvidence,\n    spatialCovariateEvidence.exactppm, spatialCovariateEvidence.ppp,\n    sphere.volume, ssf, stienen, stienenSet, studpermu.test,\n    subspaceDistance, summary.envelope, summary.ssf, thresholdCI,\n    thresholdSelect, transect.im, Tstat, tweak.fv.entry,\n    tweak.ratfv.entry, twostage.envelope, twostage.test, unmark.ssf,\n    validate.angles, validate.weights, validate2Dkernel, vanilla.fv,\n    varblock, Vmark, weightedclosepairs, which.max.im,\n    Window.quadrattest, with.fv, with.ssf, X2testEngine\n\n\nThe following objects are masked from 'package:spatstat.univar':\n\n    bw.abram, CDF, CDF.density, densityAdaptiveKernel, dkernel,\n    kaplan.meier, kernel.factor, kernel.moment, kernel.squint, km.rs,\n    km.rs.opt, match.kernel, pkernel, qkernel, quantile.density,\n    reduced.sample, rkernel, stieltjes\n\n# Assuming accidents_sf is your accident data\n\n# Reproject accidents_sf to UTM Zone 47N (EPSG: 32647)\naccidents_projected &lt;- st_transform(accidents_sf, crs = 32647)\n\n# Convert 'incident_datetime' to numeric time (hours since start of study)\naccidents_projected$incident_time_numeric &lt;- as.numeric(difftime(\n  accidents_projected$incident_datetime, min(accidents_projected$incident_datetime), units = \"hours\"))\n\n# Extract spatial coordinates from accidents_sf\ncoords &lt;- st_coordinates(accidents_projected)\n\n# Create a spatstat window (bounding box) from the reprojected coordinates\nwindow &lt;- owin(xrange = range(coords[, 1]), yrange = range(coords[, 2]))\n\n# Convert the data to ppp format (spatstat point pattern object)\naccidents_ppp &lt;- ppp(x = coords[, 1], y = coords[, 2], window = window)\n\nWarning: data contain duplicated points\n\n# Assign temporal marks (time in hours)\nmarks(accidents_ppp) &lt;- data.frame(time = accidents_projected$incident_time_numeric)\n\n# Compute the space-time K-function\nKst &lt;- Kest(accidents_ppp, correction = \"Ripley\")\n\n# Plot the Space-Time K-function result\nplot(Kst, main = \"Space-Time K-function for Road Accidents\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Remove the geometry column by converting the sf object to a regular data frame\naccidents_ml &lt;- accidents_sf %&gt;%\n  dplyr::select(severity, hour, day_of_week, season) %&gt;%\n  st_set_geometry(NULL)  \n# Convert factors to numeric for ML purposes\naccidents_ml$day_of_week &lt;- as.numeric(as.factor(accidents_ml$day_of_week))\naccidents_ml$season &lt;- as.numeric(as.factor(accidents_ml$season))\n\nstr(accidents_ml)\n\ntibble [12,986 × 4] (S3: tbl_df/tbl/data.frame)\n $ severity   : chr [1:12986] \"Medium\" \"Medium\" \"Low\" \"Medium\" ...\n $ hour       : int [1:12986] 2 3 3 3 4 4 5 5 5 6 ...\n $ day_of_week: num [1:12986] 3 3 3 3 3 3 3 3 3 3 ...\n $ season     : num [1:12986] 4 4 4 4 4 4 4 4 4 4 ...\n\n\n\n\n\n\n# Train a basic Random Forest to predict accident severity based on time and seasonal features\nset.seed(123)\nrf_model &lt;- train(severity ~ ., data = accidents_ml, method = \"rf\", trControl = trainControl(method = \"cv\", number = 5))\n\nnote: only 2 unique complexity parameters in default grid. Truncating the grid to 2 .\n\n# Check model performance\nrf_model\n\nRandom Forest \n\n12986 samples\n    3 predictor\n    3 classes: 'High', 'Low', 'Medium' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 10389, 10388, 10389, 10389, 10389 \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n  2     0.5766975  0.06664339\n  3     0.5638371  0.06716721\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 2."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setup-and-loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setup-and-loading-packages",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "library(sf)\nlibrary(tidyverse)\nlibrary(spatstat)\nlibrary(gganimate)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(spatstat.linnet)\nlibrary(caret) # For potential machine learning bonus analysis\n\nLoading required package: lattice\n\n\n\nAttaching package: 'lattice'\n\n\nThe following object is masked from 'package:spatstat.model':\n\n    panel.histogram\n\n\nThe following object is masked from 'package:spatstat.explore':\n\n    panel.histogram\n\n\n\nAttaching package: 'caret'\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(spdep) # For advanced spatial statistics\n\nWarning: package 'spdep' was built under R version 4.2.3\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-import-and-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-import-and-wrangling",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "# Load road accident data\naccidents &lt;- read_csv(\"data/thai_road_accident_2019_2022.csv\")\n\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Load road network data (assuming GeoJSON format)\nroads &lt;- st_read(\"data/hotosm_tha_roads_lines_geojson.geojson\")\n\nReading layer `hotosm_tha_roads_lines_geojson' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Take-home_Ex/Take-home_Ex01/data/hotosm_tha_roads_lines_geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 2792361 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nGeodetic CRS:  WGS 84\n\n# Filter accidents for BMR and remove missing coordinates\nbmr_regions &lt;- c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Nakhon Pathom\", \"Samut Sakhon\")\n\naccidents_clean &lt;- accidents %&gt;%\n  filter(!is.na(longitude), !is.na(latitude)) %&gt;%\n  filter(province_en %in% bmr_regions)\n\n\n\n\n\n# Convert accidents data to a spatial object with appropriate CRS (WGS84)\naccidents_sf &lt;- st_as_sf(accidents_clean, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n\n\n\n\n# Add derived variables: hour, day of the week, and season\naccidents_sf &lt;- accidents_sf %&gt;%\n  mutate(incident_datetime = as.POSIXct(incident_datetime, format=\"%Y-%m-%d %H:%M:%S\"),\n         hour = hour(incident_datetime),\n         day_of_week = wday(incident_datetime, label = TRUE),\n         season = case_when(\n           month(incident_datetime) %in% c(12, 1, 2) ~ \"Winter\",\n           month(incident_datetime) %in% c(3, 4, 5) ~ \"Summer\",\n           month(incident_datetime) %in% c(6, 7, 8) ~ \"Rainy\",\n           TRUE ~ \"Autumn\"\n         ))\n\n# Create a new severity column based on fatalities and injuries\naccidents_sf$severity &lt;- with(accidents_sf, ifelse(number_of_fatalities &gt; 0, \"High\",\n                                    ifelse(number_of_injuries &gt; 0, \"Medium\", \"Low\")))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-analysis",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "# Reproject accidents data to UTM Zone 47N (EPSG: 32647)\naccidents_sf_projected &lt;- st_transform(accidents_sf, crs = 32647)\n\n# Extract coordinates and bounding box for spatstat conversion\ncoords &lt;- st_coordinates(accidents_sf_projected)\n\n# Create a spatstat window (bounding box) from the reprojected coordinates\nwindow &lt;- owin(range(coords[, 1]), range(coords[, 2]))\n\n# Convert the data to ppp format (spatstat point pattern object)\naccidents_ppp &lt;- ppp(x = coords[, 1], y = coords[, 2], window = window)\n\nWarning: data contain duplicated points\n\n# Plot the point pattern to confirm\nplot(accidents_ppp, main = \"Road Traffic Accidents in BMR\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Reproject the accidents data to UTM Zone 47N (EPSG: 32647)\naccidents_projected &lt;- st_transform(accidents_sf, crs = 32647)\n\n# Step 2: Extract the coordinates and create a bounding window\naccident_coords &lt;- st_coordinates(accidents_projected)\naccident_window &lt;- owin(xrange = range(accident_coords[, 1]), yrange = range(accident_coords[, 2]))\n\n# Step 3: Convert to ppp object\naccidents_ppp &lt;- ppp(x = accident_coords[, 1], y = accident_coords[, 2], window = accident_window)\n\nWarning: data contain duplicated points\n\naccidents_ppp_unique &lt;- unique.ppp(accidents_ppp)\n\n\n\n# Step 4: Verify the ppp object\nsummary(accidents_ppp_unique)\n\nPlanar point pattern:  11480 points\nAverage intensity 1.076791e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n# Create a Kernel Density Estimation (KDE) map\naccident_density &lt;- density(accidents_ppp_unique, sigma = 1000)\n\n# Plot the density map\nplot(accident_density, main=\"Accident Density in BMR\", col=topo.colors(356))\n\n\n\n\n\n\n\n\nNetwork Spatial Point Pattern Analysis\n\nlibrary(dplyr)\n\nroads_projected &lt;- st_transform(roads, crs = 32647)\n\n# Filter the data to keep only rows where both 'name' and 'name.en' are not empty\nroads_filtered &lt;- roads_projected %&gt;%\n  filter(name != \"\", name.en != \"\", !is.na(name), !is.na(name.en))\n\n# Check how many records remain after filtering\nprint(nrow(roads_filtered))\n\n[1] 71588\n\n\n\n# Load necessary libraries\nlibrary(sf)  # For st_cast and spatial operations\nlibrary(sp)\n\nWarning: package 'sp' was built under R version 4.2.3\n\nlibrary(lwgeom)\n\nWarning: package 'lwgeom' was built under R version 4.2.3\n\n\nLinking to liblwgeom 3.0.0beta1 r16016, GEOS 3.11.0, PROJ 9.1.0\n\n\n\nAttaching package: 'lwgeom'\n\n\nThe following object is masked from 'package:sf':\n\n    st_perimeter\n\nlibrary(spatstat.geom)\nlibrary(spatstat.linnet)\nlibrary(profvis)  # For profiling\n\n# Function to process data in chunks for memory efficiency\nprocess_chunk &lt;- function(start_index, end_index, roads_sp_simplified) {\n  message(paste(\"Processing chunk from\", start_index, \"to\", end_index))\n  \n  # Extract the line segments for the chunk\n  line_segments &lt;- lapply(slot(roads_sp_simplified[start_index:end_index, ], \"lines\"), function(line_obj) {\n    lapply(line_obj@Lines, function(single_line) {\n      single_line@coords  # Extract coordinates\n    })\n  })\n  \n  # Combine the coordinates\n  all_coords &lt;- do.call(rbind, unlist(line_segments, recursive = FALSE))\n  segments &lt;- cbind(all_coords[1:(nrow(all_coords) - 1), ], all_coords[2:nrow(all_coords), ])\n  \n  return(segments)\n}\n\n\n\n  message(\"Starting the process...\")\n\nStarting the process...\n\n    # Step 1: Cast to LINESTRING\n    message(\"Casting to LINESTRING...\")\n\nCasting to LINESTRING...\n\n    roads_linestring &lt;- st_cast(roads_filtered, \"LINESTRING\")\n\nWarning in st_cast.sf(roads_filtered, \"LINESTRING\"): repeating attributes for\nall sub-geometries for which they may not be constant\n\n    message(\"Casting successful.\")\n\nCasting successful.\n\n    # Step 2: Subset the dataset (for testing smaller portions)\n    message(\"Subsetting the dataset for testing...\")\n\nSubsetting the dataset for testing...\n\n    roads_linestring_subset &lt;- roads_linestring[1:500, ]\n    message(\"Subsetting successful.\")\n\nSubsetting successful.\n\n    # Step 3: Ensure geometries are LINESTRING and remove empty geometries\n    message(\"Removing non-LINESTRING and empty geometries...\")\n\nRemoving non-LINESTRING and empty geometries...\n\n    roads_linestring_subset &lt;- roads_linestring_subset[st_geometry_type(roads_linestring_subset) == \"LINESTRING\", ]\n    roads_linestring_subset &lt;- roads_linestring_subset[!st_is_empty(roads_linestring_subset), ]\n    message(\"Empty geometries removed.\")\n\nEmpty geometries removed.\n\n    # Step 4: Simplify the geometries using sf's st_simplify\n    message(\"Simplifying geometries with sf's st_simplify...\")\n\nSimplifying geometries with sf's st_simplify...\n\n    roads_simplified &lt;- st_simplify(roads_linestring_subset, dTolerance = 1000)  # Adjust tolerance as needed\n    message(\"Simplification successful.\")\n\nSimplification successful.\n\n    # Step 5: Convert the simplified sf object to Spatial\n    message(\"Converting simplified sf object to Spatial...\")\n\nConverting simplified sf object to Spatial...\n\n    roads_sp_simplified &lt;- as(roads_simplified, \"Spatial\")\n    message(\"Conversion to Spatial successful.\")\n\nConversion to Spatial successful.\n\n    # Step 6: Process data in chunks to manage memory usage\n    message(\"Processing data in chunks...\")\n\nProcessing data in chunks...\n\n    chunk_size &lt;- 100  # Define chunk size based on memory capacity\n    num_chunks &lt;- ceiling(nrow(roads_sp_simplified) / chunk_size)\n\n    all_segments &lt;- list()  # Initialize list to store results\n\n    for (i in seq(1, nrow(roads_sp_simplified), by = chunk_size)) {\n      end_index &lt;- min(i + chunk_size - 1, nrow(roads_sp_simplified))\n      message(paste(\"Processing chunk\", i, \"to\", end_index))\n      all_segments[[length(all_segments) + 1]] &lt;- process_chunk(i, end_index, roads_sp_simplified)\n    }\n\nProcessing chunk 1 to 100\n\n\nProcessing chunk from 1 to 100\n\n\nProcessing chunk 101 to 200\n\n\nProcessing chunk from 101 to 200\n\n\nProcessing chunk 201 to 300\n\n\nProcessing chunk from 201 to 300\n\n\nProcessing chunk 301 to 400\n\n\nProcessing chunk from 301 to 400\n\n\nProcessing chunk 401 to 500\n\n\nProcessing chunk from 401 to 500\n\n    # Combine all segments after processing\n    message(\"Combining segments...\")\n\nCombining segments...\n\n    final_segments &lt;- do.call(rbind, all_segments)\n\n    # Step 7: Define the spatial window\n    message(\"Defining spatial window...\")\n\nDefining spatial window...\n\n    window &lt;- owin(xrange = range(final_segments[, 1]), yrange = range(final_segments[, 2]))\n\n    # Step 8: Create the psp object using the extracted segments\n    message(\"Creating psp object...\")\n\nCreating psp object...\n\n    psp_object &lt;- psp(\n      x0 = final_segments[, 1],  # Start x-coordinates\n      y0 = final_segments[, 2],  # Start y-coordinates\n      x1 = final_segments[, 3],  # End x-coordinates\n      y1 = final_segments[, 4],  # End y-coordinates\n      window = window            # Define the spatial window\n    )\n    message(\"PSP object creation successful.\")\n\nPSP object creation successful.\n\n    # Step 9: Print the summary of the created psp object\n    message(\"PSP summary...\")\n\nPSP summary...\n\n    print(summary(psp_object))\n\n1001 line segments\nLengths:\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n      0.0     112.0     489.9   71096.3    5342.7 1362532.9 \nTotal length: 71167376.3042794 units  \nLength per unit area: 6.7342387556204e-05 \nAngles (radians):\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.6022  1.4038  1.4411  2.3279  3.1396 \nWindow: rectangle = [418247.1, 1155055.8] x [774937.8, 2209230.1] units\n                    (736800 x 1434000 units)\nWindow area = 1.0568e+12 square units\n\n    # Step 10: Convert the psp object to a linnet object (linear network)\n    message(\"Converting psp object to linnet object...\")\n\nConverting psp object to linnet object...\n\n    linnet_object &lt;- as.linnet(psp_object)\n    message(\"Linnet object conversion successful.\")\n\nLinnet object conversion successful.\n\n    # Step 11: Print the summary of the linnet object to check if everything is correct\n    message(\"Linnet summary...\")\n\nLinnet summary...\n\n    print(summary(linnet_object))\n\nLinear network with 5023 vertices and 9276 lines\nTotal length 71156180 units\nMaximum vertex degree: 6\n[Non-sparse matrix representation]\nNetwork is connected\nDiameter: 1466294 units\nBounding radius: 1104071 units\nNumerical tolerance: 2.542313e-05 units\nEnclosing window: rectangle = [418247.1, 1155055.8] x [774937.8, 2209230.1] \nunits\n\n    # Plot the linear network\nplot(linnet_object, main = \"Linear Network\")\n\n\n\n\n\n\n\n\n\n# Create the linear network\naccident_net &lt;- lpp(accidents_ppp_unique, linnet_object)\n\n# Plot the road network to verify\n# Plot with custom colors and symbols\nplot(accident_net, \n     main = \"Accidents on Road Network in BMR\",\n     pch = 19,           \n     cex = 0.5,          \n     col = \"black\",        \n     lty = 1,            \n     lwd = 2,            \n     col.network = \"blue\")\n\n\n\n\n\n\n\n\nSpatial Clustering (K-Function)\n\n# Apply K-function to analyze clustering on the road network\naccident_net_subset &lt;- accident_net[1:1000]  # Use the first 1000 points\nK_result &lt;- linearK(accident_net_subset)\n\n\n\n# Plot the result of the K-function\nplot(K_result, main=\"K-Function Analysis of Accidents in BMR\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geovisualisation-and-geocommunication",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geovisualisation-and-geocommunication",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "ggplot() +\n  geom_sf(data = roads, color = \"grey\") +\n  geom_sf(data = accidents_sf, aes(color = severity), alpha = 0.5) +\n  theme_minimal() +\n  labs(title = \"Road Traffic Accidents in Bangkok Metropolitan Region\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Create an animated visualization of accidents over time (by hour)\naccident_animation &lt;- ggplot(accidents_sf) +\n  geom_point(aes(x = st_coordinates(accidents_sf)[, 1], \n                 y = st_coordinates(accidents_sf)[, 2], color = severity), alpha = 0.6) +\n  transition_time(hour) +\n  labs(title = 'Accident Distribution Over Time: {frame_time}') +\n  theme_minimal()\n\n# Save the animation as a GIF\nanimate(accident_animation, renderer = gifski_renderer())\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(spatstat.geom)\nlibrary(spatstat)\nlibrary(spatstat.core)\n\nRegistered S3 methods overwritten by 'spatstat.core':\n  method                           from            \n  Ops.msr                          spatstat.model  \n  affine.msr                       spatstat.model  \n  AIC.dppm                         spatstat.model  \n  AIC.kppm                         spatstat.model  \n  AIC.mppm                         spatstat.model  \n  AIC.ppm                          spatstat.model  \n  anova.mppm                                       \n  anova.ppm                                        \n  anova.slrm                                       \n  as.data.frame.bw.optim           spatstat.explore\n  as.data.frame.envelope           spatstat.explore\n  as.data.frame.fv                 spatstat.explore\n  as.function.fv                   spatstat.explore\n  as.function.leverage.ppm         spatstat.model  \n  as.function.rhohat               spatstat.explore\n  as.function.ssf                  spatstat.explore\n  as.im.leverage.ppm               spatstat.model  \n  as.im.scan.test                  spatstat.explore\n  as.im.ssf                        spatstat.explore\n  as.layered.msr                                   \n  as.owin.dppm                     spatstat.model  \n  as.owin.influence.ppm            spatstat.model  \n  as.owin.kppm                     spatstat.model  \n  as.owin.leverage.ppm             spatstat.model  \n  as.owin.msr                      spatstat.model  \n  as.owin.ppm                      spatstat.model  \n  as.owin.quadrattest              spatstat.explore\n  as.owin.slrm                     spatstat.model  \n  as.ppp.influence.ppm             spatstat.model  \n  as.ppp.ssf                       spatstat.explore\n  cbind.fv                         spatstat.explore\n  clusterfield.kppm                spatstat.model  \n  clusterkernel.kppm               spatstat.model  \n  clusterradius.kppm               spatstat.model  \n  clusterradius.zclustermodel      spatstat.model  \n  coef.dppm                        spatstat.model  \n  coef.fii                         spatstat.model  \n  coef.kppm                        spatstat.model  \n  coef.mppm                        spatstat.model  \n  coef.ppm                         spatstat.model  \n  coef.slrm                        spatstat.model  \n  coef.summary.fii                 spatstat.model  \n  coef.summary.kppm                spatstat.model  \n  coef.summary.ppm                 spatstat.model  \n  coef.summary.slrm                spatstat.model  \n  coef.vblogit                     spatstat.model  \n  collapse.anylist                                 \n  collapse.fv                                      \n  compatible.fasp                  spatstat.explore\n  compatible.fv                                    \n  compatible.rat                   spatstat.explore\n  contour.leverage.ppm             spatstat.model  \n  contour.objsurf                  spatstat.model  \n  contour.ssf                      spatstat.explore\n  density.ppp                                      \n  density.ppplist                  spatstat.explore\n  density.psp                      spatstat.explore\n  density.splitppp                 spatstat.explore\n  deriv.fv                                         \n  deviance.ppm                     spatstat.model  \n  deviance.slrm                    spatstat.model  \n  dfbetas.ppm                      spatstat.model  \n  dfbetas.ppmInfluence             spatstat.model  \n  dfbetas.slrm                     spatstat.model  \n  dim.detpointprocfamily           spatstat.model  \n  dim.fasp                         spatstat.explore\n  dim.msr                          spatstat.model  \n  dimnames.fasp                    spatstat.explore\n  dimnames.msr                     spatstat.model  \n  domain.dppm                      spatstat.model  \n  domain.influence.ppm             spatstat.model  \n  domain.kppm                      spatstat.model  \n  domain.leverage.ppm              spatstat.model  \n  domain.msr                       spatstat.model  \n  domain.ppm                       spatstat.model  \n  domain.quadrattest               spatstat.explore\n  domain.slrm                      spatstat.model  \n  extractAIC.dppm                  spatstat.model  \n  extractAIC.kppm                  spatstat.model  \n  extractAIC.mppm                  spatstat.model  \n  extractAIC.ppm                   spatstat.model  \n  extractAIC.slrm                  spatstat.model  \n  family.hackglmmPQL               spatstat.model  \n  family.vblogit                   spatstat.model  \n  [.fasp                           spatstat.explore\n  fitted.dppm                      spatstat.model  \n  fitted.kppm                      spatstat.model  \n  fitted.mppm                      spatstat.model  \n  fitted.ppm                       spatstat.model  \n  fitted.rppm                      spatstat.model  \n  fitted.slrm                      spatstat.model  \n  fixef.mppm                       spatstat.model  \n  flipxy.msr                       spatstat.model  \n  formula.dppm                     spatstat.model  \n  formula.fv                       spatstat.explore\n  formula.hackglmmPQL              spatstat.model  \n  formula.kppm                     spatstat.model  \n  formula.ppm                      spatstat.model  \n  formula.slrm                     spatstat.model  \n  [.fv                             spatstat.explore\n  getCall.mppm                     spatstat.model  \n  harmonise.fv                                     \n  harmonise.msr                                    \n  harmonize.fv                                     \n  image.objsurf                    spatstat.model  \n  image.ssf                        spatstat.explore\n  [.influence.ppm                  spatstat.model  \n  influence.ppm                    spatstat.model  \n  influence.ppmInfluence           spatstat.model  \n  influence.slrm                   spatstat.model  \n  integral.influence.ppm           spatstat.model  \n  integral.leverage.ppm            spatstat.model  \n  integral.msr                     spatstat.model  \n  integral.ssf                     spatstat.explore\n  intensity.detpointprocfamily     spatstat.model  \n  intensity.dppm                   spatstat.model  \n  intensity.ppm                    spatstat.model  \n  intensity.slrm                   spatstat.model  \n  intensity.zclustermodel          spatstat.model  \n  intensity.zgibbsmodel            spatstat.model  \n  is.expandable.ppm                spatstat.model  \n  is.marked.mppm                   spatstat.model  \n  is.marked.msr                    spatstat.model  \n  is.marked.ppm                    spatstat.model  \n  is.marked.slrm                   spatstat.model  \n  is.multitype.mppm                spatstat.model  \n  is.multitype.msr                 spatstat.model  \n  is.multitype.ppm                 spatstat.model  \n  is.multitype.slrm                spatstat.model  \n  is.poisson.exactppm              spatstat.explore\n  is.poisson.interact              spatstat.model  \n  is.poisson.kppm                  spatstat.model  \n  is.poisson.mppm                  spatstat.model  \n  is.poisson.ppm                   spatstat.model  \n  is.poisson.slrm                  spatstat.model  \n  is.poisson.zgibbsmodel           spatstat.model  \n  is.stationary.detpointprocfamily spatstat.model  \n  is.stationary.dppm               spatstat.model  \n  is.stationary.exactppm           spatstat.explore\n  is.stationary.kppm               spatstat.model  \n  is.stationary.ppm                spatstat.model  \n  is.stationary.slrm               spatstat.model  \n  is.stationary.zgibbsmodel        spatstat.model  \n  labels.dppm                      spatstat.model  \n  labels.kppm                      spatstat.model  \n  labels.ppm                       spatstat.model  \n  labels.slrm                      spatstat.model  \n  [.leverage.ppm                   spatstat.model  \n  [.localpcfmatrix                 spatstat.explore\n  logLik.dppm                      spatstat.model  \n  logLik.kppm                      spatstat.model  \n  logLik.mppm                      spatstat.model  \n  logLik.ppm                       spatstat.model  \n  logLik.slrm                      spatstat.model  \n  logLik.vblogit                   spatstat.model  \n  marks.ssf                        spatstat.explore\n  max.ssf                          spatstat.explore\n  mean.leverage.ppm                spatstat.model  \n  min.ssf                          spatstat.explore\n  model.frame.dppm                 spatstat.model  \n  model.frame.kppm                 spatstat.model  \n  model.frame.ppm                  spatstat.model  \n  model.frame.slrm                 spatstat.model  \n  model.matrix.dppm                spatstat.model  \n  model.matrix.ippm                spatstat.model  \n  model.matrix.kppm                spatstat.model  \n  model.matrix.mppm                spatstat.model  \n  model.matrix.ppm                 spatstat.model  \n  model.matrix.slrm                spatstat.model  \n  [.msr                            spatstat.model  \n  nobs.dppm                        spatstat.model  \n  nobs.kppm                        spatstat.model  \n  nobs.mppm                        spatstat.model  \n  nobs.ppm                         spatstat.model  \n  pairs.im                                         \n  pairs.listof                     spatstat.explore\n  pairs.solist                     spatstat.explore\n  persp.leverage.ppm               spatstat.model  \n  persp.objsurf                    spatstat.model  \n  plot.addvar                      spatstat.model  \n  plot.bermantest                  spatstat.explore\n  plot.bw.frac                     spatstat.explore\n  plot.bw.optim                    spatstat.explore\n  plot.cdftest                     spatstat.explore\n  plot.diagppm                     spatstat.model  \n  plot.dppm                        spatstat.model  \n  plot.envelope                    spatstat.explore\n  plot.fasp                        spatstat.explore\n  plot.fii                         spatstat.model  \n  plot.fv                                          \n  plot.influence.ppm               spatstat.model  \n  plot.kppm                                        \n  plot.laslett                     spatstat.explore\n  plot.leverage.ppm                spatstat.model  \n  plot.localpcfmatrix              spatstat.explore\n  plot.lurk                        spatstat.model  \n  plot.minconfit                   spatstat.model  \n  plot.mppm                        spatstat.model  \n  plot.msr                         spatstat.model  \n  plot.objsurf                     spatstat.model  \n  plot.parres                      spatstat.model  \n  plot.plotpairsim                 spatstat.explore\n  plot.plotppm                     spatstat.model  \n  plot.ppm                         spatstat.model  \n  plot.profilepl                                   \n  plot.qqppm                                       \n  plot.quadrattest                                 \n  plot.rho2hat                     spatstat.explore\n  plot.rhohat                      spatstat.explore\n  plot.rppm                                        \n  plot.scan.test                   spatstat.explore\n  plot.slrm                        spatstat.model  \n  plot.spatialcdf                  spatstat.explore\n  plot.ssf                         spatstat.explore\n  plot.studpermutest                               \n  predict.dppm                     spatstat.model  \n  predict.exactppm                 spatstat.explore\n  predict.kppm                     spatstat.model  \n  predict.mppm                                     \n  predict.ppm                                      \n  predict.profilepl                spatstat.model  \n  predict.rho2hat                  spatstat.explore\n  predict.rhohat                                   \n  predict.rppm                     spatstat.model  \n  predict.slrm                     spatstat.model  \n  predict.vblogit                                  \n  predict.zclustermodel            spatstat.model  \n  print.addvar                     spatstat.model  \n  print.bt.frame                   spatstat.model  \n  print.bw.frac                    spatstat.explore\n  print.bw.optim                   spatstat.explore\n  print.densityfun                 spatstat.explore\n  print.detpointprocfamily         spatstat.model  \n  print.detpointprocfamilyfun      spatstat.model  \n  print.diagppm                    spatstat.model  \n  print.dppm                       spatstat.model  \n  print.envelope                   spatstat.explore\n  print.exactppm                   spatstat.explore\n  print.fasp                       spatstat.explore\n  print.fii                        spatstat.model  \n  print.fv                                         \n  print.fvfun                      spatstat.explore\n  print.hasenvelope                spatstat.explore\n  print.hierarchicalordering       spatstat.model  \n  print.influence.ppm              spatstat.model  \n  print.interact                   spatstat.model  \n  print.intermaker                 spatstat.model  \n  print.isf                        spatstat.model  \n  print.kppm                       spatstat.model  \n  print.laslett                    spatstat.explore\n  print.leverage.ppm               spatstat.model  \n  print.localpcfmatrix             spatstat.explore\n  print.lurk                       spatstat.model  \n  print.minconfit                  spatstat.model  \n  print.mppm                       spatstat.model  \n  print.msr                        spatstat.model  \n  print.objsurf                    spatstat.model  \n  print.parres                     spatstat.model  \n  print.plotpairsim                spatstat.explore\n  print.plotppm                    spatstat.model  \n  print.ppm                        spatstat.model  \n  print.profilepl                  spatstat.model  \n  print.qqppm                      spatstat.model  \n  print.quadrattest                spatstat.explore\n  print.rat                        spatstat.explore\n  print.rho2hat                    spatstat.explore\n  print.rhohat                     spatstat.explore\n  print.rppm                       spatstat.model  \n  print.slrm                       spatstat.model  \n  print.Smoothfun                  spatstat.explore\n  print.ssf                        spatstat.explore\n  print.summary.dppm               spatstat.model  \n  print.summary.fii                                \n  print.summary.kppm               spatstat.model  \n  print.summary.mppm               spatstat.model  \n  print.summary.objsurf            spatstat.model  \n  print.summary.ppm                spatstat.model  \n  print.summary.slrm               spatstat.model  \n  print.summary.ssf                spatstat.explore\n  print.vblogit                    spatstat.model  \n  print.zclustermodel                              \n  print.zgibbsmodel                spatstat.model  \n  prune.rppm                       spatstat.model  \n  quantile.density                                 \n  ranef.mppm                       spatstat.model  \n  range.ssf                        spatstat.explore\n  [.rat                            spatstat.explore\n  reach.detpointprocfamily         spatstat.model  \n  reach.dppm                       spatstat.model  \n  reach.fii                        spatstat.model  \n  reach.interact                   spatstat.model  \n  reach.kppm                       spatstat.model  \n  reach.ppm                        spatstat.model  \n  reach.slrm                       spatstat.model  \n  reach.zclustermodel              spatstat.model  \n  rescale.msr                      spatstat.model  \n  residuals.dppm                   spatstat.model  \n  residuals.kppm                   spatstat.model  \n  residuals.mppm                   spatstat.model  \n  residuals.ppm                    spatstat.model  \n  residuals.slrm                   spatstat.model  \n  rmhmodel.ppm                     spatstat.model  \n  rmh.ppm                          spatstat.model  \n  rotate.msr                       spatstat.model  \n  scalardilate.msr                 spatstat.model  \n  shift.influence.ppm              spatstat.model  \n  shift.leverage.ppm               spatstat.model  \n  shift.msr                        spatstat.model  \n  shift.quadrattest                spatstat.explore\n  simulate.detpointprocfamily      spatstat.model  \n  simulate.dppm                    spatstat.model  \n  simulate.kppm                    spatstat.model  \n  simulate.mppm                    spatstat.model  \n  simulate.ppm                     spatstat.model  \n  simulate.profilepl               spatstat.model  \n  simulate.rhohat                  spatstat.explore\n  simulate.slrm                    spatstat.model  \n  split.msr                        spatstat.model  \n  [.ssf                            spatstat.explore\n  summary.dppm                     spatstat.model  \n  summary.envelope                 spatstat.explore\n  summary.fii                      spatstat.model  \n  summary.kppm                     spatstat.model  \n  summary.mppm                     spatstat.model  \n  summary.msr                      spatstat.model  \n  summary.objsurf                  spatstat.model  \n  summary.ppm                                      \n  summary.profilepl                spatstat.model  \n  summary.slrm                     spatstat.model  \n  summary.ssf                      spatstat.explore\n  summary.vblogit                  spatstat.model  \n  terms.dppm                       spatstat.model  \n  terms.kppm                       spatstat.model  \n  terms.mppm                       spatstat.model  \n  terms.ppm                        spatstat.model  \n  terms.slrm                       spatstat.model  \n  unitname.dppm                    spatstat.model  \n  unitname.kppm                    spatstat.model  \n  unitname.minconfit               spatstat.model  \n  unitname.msr                     spatstat.model  \n  unitname.ppm                     spatstat.model  \n  unitname.slrm                    spatstat.model  \n  unmark.ssf                       spatstat.explore\n  unstack.msr                      spatstat.model  \n  update.detpointprocfamily        spatstat.model  \n  update.interact                  spatstat.model  \n  update.ippm                                      \n  update.kppm                      spatstat.model  \n  update.msr                       spatstat.model  \n  update.ppm                                       \n  update.slrm                      spatstat.model  \n  vcov.kppm                        spatstat.model  \n  vcov.mppm                                        \n  vcov.ppm                                         \n  vcov.slrm                        spatstat.model  \n  Window.dppm                      spatstat.model  \n  Window.influence.ppm             spatstat.model  \n  Window.kppm                      spatstat.model  \n  Window.leverage.ppm              spatstat.model  \n  Window.msr                       spatstat.model  \n  Window.ppm                       spatstat.model  \n  Window.quadrattest               spatstat.explore\n  Window.slrm                      spatstat.model  \n  with.fv                          spatstat.explore\n  with.msr                         spatstat.model  \n  with.ssf                         spatstat.explore\n  $&lt;-.fv                           spatstat.explore\n  coef&lt;-.fii                       spatstat.model  \n  dimnames&lt;-.fasp                  spatstat.explore\n  [&lt;-.fv                           spatstat.explore\n  marks&lt;-.ssf                      spatstat.explore\n  names&lt;-.fv                       spatstat.explore\n  unitname&lt;-.dppm                  spatstat.model  \n  unitname&lt;-.kppm                  spatstat.model  \n  unitname&lt;-.minconfit             spatstat.model  \n  unitname&lt;-.msr                   spatstat.model  \n  unitname&lt;-.ppm                   spatstat.model  \n  unitname&lt;-.slrm                  spatstat.model  \n\n\nspatstat.core 2.4-4.010\n\n\n\nAttaching package: 'spatstat.core'\n\n\nThe following object is masked from 'package:lattice':\n\n    panel.histogram\n\n\nThe following objects are masked from 'package:spatstat.model':\n\n    [.influence.ppm, [.leverage.ppm, [.msr, accumulateStatus,\n    active.interactions, adaptcoef, addvar, affine.msr, AIC.dppm,\n    AIC.kppm, AIC.mppm, AIC.ppm, anova.mppm, anova.ppm, anova.slrm,\n    areadelta2, AreaInter, as.function.leverage.ppm, as.fv.dppm,\n    as.fv.kppm, as.fv.minconfit, as.im.leverage.ppm, as.interact,\n    as.interact.fii, as.interact.interact, as.interact.ppm,\n    as.interact.zgibbsmodel, as.isf, as.isf.zgibbsmodel,\n    as.layered.msr, as.owin.dppm, as.owin.influence.ppm, as.owin.kppm,\n    as.owin.leverage.ppm, as.owin.msr, as.owin.ppm, as.owin.slrm,\n    as.ppm, as.ppm.dppm, as.ppm.kppm, as.ppm.ppm, as.ppm.profilepl,\n    as.ppm.rppm, as.ppp.influence.ppm, auc.kppm, auc.ppm, auc.slrm,\n    augment.msr, BadGey, bc, bc.ppm, berman.test.ppm, bigvaluerule,\n    blankcoefnames, bt.frame, cannot.update, cauchy.estK,\n    cauchy.estpcf, cdf.test.mppm, cdf.test.ppm, cdf.test.slrm,\n    check.separable, closepaircounts, clusterfield.kppm, clusterfit,\n    clusterkernel.kppm, clusterradius.kppm,\n    clusterradius.zclustermodel, coef.dppm, coef.fii, coef.kppm,\n    coef.mppm, coef.ppm, coef.slrm, coef.summary.fii,\n    coef.summary.kppm, coef.summary.ppm, coef.summary.slrm,\n    coef.vblogit, coef&lt;-.fii, compareFit, Concom, condSimCox,\n    contour.leverage.ppm, contour.objsurf, crosspaircounts,\n    damaged.ppm, data.mppm, data.ppm, deltasuffstat,\n    detpointprocfamilyfun, deviance.ppm, deviance.slrm, dfbetas.ppm,\n    dfbetas.ppmInfluence, dfbetas.slrm, dffit, dffit.ppm, dffit.slrm,\n    diagnose.ppm, diagnose.ppm.engine, DiggleGatesStibbard,\n    DiggleGratton, dim.detpointprocfamily, dim.msr, dimnames.msr,\n    domain.dppm, domain.influence.ppm, domain.kppm,\n    domain.leverage.ppm, domain.msr, domain.ppm, domain.slrm,\n    doMultiStraussHard, dppapproxkernel, dppapproxpcf, dppBessel,\n    dppCauchy, dppDpcf, dppeigen, dppGauss, dppkernel, dppm, dppMatern,\n    dppmFixAlgorithm, dppmFixIntensity, dppparbounds, dppPowerExp,\n    DPPSaddle, DPPSaddlePairwise, dppspecden, dppspecdenrange, dummify,\n    dummy.ppm, eem, eem.ppm, eem.slrm, effectfun, emend, emend.ppm,\n    emend.slrm, envelope.kppm, envelope.ppm, envelope.slrm, equalpairs,\n    evalInteraction, evalInterEngine, evalPairPotential,\n    evalPairwiseTerm, exactMPLEstrauss, expandDot, extractAIC.dppm,\n    extractAIC.kppm, extractAIC.mppm, extractAIC.ppm, extractAIC.slrm,\n    fakefii, family.hackglmmPQL, family.vblogit, fii, Fiksel,\n    fill.coefs, findCovariate, fitin, fitin.ppm, fitin.profilepl,\n    fitted.dppm, fitted.kppm, fitted.mppm, fitted.ppm, fitted.rppm,\n    fitted.slrm, fixef.mppm, flipxy.msr, forbid.logi, formula.dppm,\n    formula.hackglmmPQL, formula.kppm, formula.ppm, formula.slrm, Gcom,\n    getCall.mppm, getdataname, getglmdata, getglmfit, getglmsubset,\n    getppmdatasubset, getppmOriginalCovariates, Geyer, geyercounts,\n    geyerdelta2, GLMpredict, Gres, hackglmmPQL, Hardcore, hardcoredist,\n    hardcoredist.fii, hardcoredist.ppm, harmonic, harmonise.msr,\n    has.offset, has.offset.term, hasglmfit, hierarchicalordering,\n    HierHard, hiermat, hierpair.family, HierStrauss, HierStraussHard,\n    ho.engine, Hybrid, hybrid.family, ic, ic.kppm, ic.ppm,\n    illegal.iformula, image.objsurf, impliedcoefficients,\n    impliedpresence, improve.kppm, influence.ppm,\n    influence.ppmInfluence, influence.slrm, inforder.family,\n    instantiate.interact, integral.influence.ppm,\n    integral.leverage.ppm, integral.msr, intensity.detpointprocfamily,\n    intensity.dppm, intensity.ppm, intensity.slrm,\n    intensity.zclustermodel, intensity.zgibbsmodel,\n    interactionfamilyname, interactionorder, interactionorder.fii,\n    interactionorder.interact, interactionorder.isf,\n    interactionorder.ppm, interactionorder.zgibbsmodel, intermaker,\n    ippm, is.dppm, is.expandable.ppm, is.hybrid, is.hybrid.interact,\n    is.hybrid.ppm, is.interact, is.kppm, is.lppm, is.marked.mppm,\n    is.marked.msr, is.marked.ppm, is.marked.slrm, is.mppm,\n    is.multitype.mppm, is.multitype.msr, is.multitype.ppm,\n    is.multitype.slrm, is.poisson.interact, is.poisson.kppm,\n    is.poisson.mppm, is.poisson.ppm, is.poisson.slrm,\n    is.poisson.zgibbsmodel, is.ppm, is.slrm,\n    is.stationary.detpointprocfamily, is.stationary.dppm,\n    is.stationary.kppm, is.stationary.ppm, is.stationary.slrm,\n    is.stationary.zgibbsmodel, Kcom, killinteraction, Kmodel,\n    Kmodel.detpointprocfamily, Kmodel.dppm, Kmodel.kppm, Kmodel.ppm,\n    Kmodel.slrm, Kmodel.zclustermodel, Kpcf.kppm, kppm, kppm.formula,\n    kppm.ppp, kppm.quad, kppmCLadap, kppmComLik, kppmMinCon,\n    kppmPalmLik, Kres, labels.dppm, labels.kppm, labels.ppm,\n    labels.slrm, LambertW, LennardJones, leverage, leverage.ppm,\n    leverage.ppmInfluence, leverage.slrm, lgcp.estK, lgcp.estpcf,\n    logi.engine, logLik.dppm, logLik.kppm, logLik.mppm, logLik.ppm,\n    logLik.slrm, logLik.vblogit, LurkEngine, lurking, lurking.mppm,\n    lurking.ppm, lurking.ppp, mapInterVars, matclust.estK,\n    matclust.estpcf, Mayer, mean.leverage.ppm, measureContinuous,\n    measureDiscrete, measureNegative, measurePositive,\n    measureVariation, mincontrast, model.covariates, model.depends,\n    model.frame.dppm, model.frame.kppm, model.frame.ppm,\n    model.frame.slrm, model.images, model.images.dppm,\n    model.images.kppm, model.images.ppm, model.images.slrm,\n    model.is.additive, model.matrix.dppm, model.matrix.ippm,\n    model.matrix.kppm, model.matrix.mppm, model.matrix.ppm,\n    model.matrix.slrm, model.se.image, modelFrameGam, mpl.engine,\n    mpl.get.covariates, mpl.prepare, mpl.usable, mppm, msr, MultiHard,\n    MultiStrauss, MultiStraussHard, newformula,\n    newstyle.coeff.handling, nndcumfun, no.trend.ppm, nobs.dppm,\n    nobs.kppm, nobs.mppm, nobs.ppm, npfun, objsurf, objsurf.dppm,\n    objsurf.kppm, objsurf.minconfit, objsurfEngine, Ops.msr,\n    optimConverged, optimNsteps, optimStatus, Ord, ord.family,\n    OrdThresh, outdated.interact, oversize.quad, PairPiece,\n    PairPotentialType, pairsat.family, Pairwise, pairwise.family,\n    panel.contour, panel.histogram, panel.image, parameters,\n    parameters.dppm, parameters.fii, parameters.interact,\n    parameters.kppm, parameters.ppm, parameters.profilepl,\n    parameters.slrm, parres, partialModelMatrix, pcfmodel,\n    pcfmodel.detpointprocfamily, pcfmodel.dppm, pcfmodel.kppm,\n    pcfmodel.ppm, pcfmodel.slrm, pcfmodel.zclustermodel, Penttinen,\n    persp.leverage.ppm, persp.objsurf, plot.addvar, plot.diagppm,\n    plot.dppm, plot.fii, plot.influence.ppm, plot.kppm,\n    plot.leverage.ppm, plot.lurk, plot.minconfit, plot.mppm, plot.msr,\n    plot.objsurf, plot.parres, plot.plotppm, plot.ppm, plot.profilepl,\n    plot.qqppm, plot.rppm, plot.slrm, ploterodeimage, ploterodewin,\n    PoisSaddle, PoisSaddleArea, PoisSaddleGeyer, PoisSaddlePairwise,\n    Poisson, polynom, ppm, ppm.default, ppm.formula, ppm.ppp, ppm.quad,\n    ppmCovariates, ppmDerivatives, ppmInfluence, ppmInfluenceEngine,\n    PPMmodelmatrix, predict.dppm, predict.kppm, predict.mppm,\n    predict.ppm, predict.profilepl, predict.rppm, predict.slrm,\n    predict.vblogit, predict.zclustermodel, print.addvar,\n    print.bt.frame, print.detpointprocfamily,\n    print.detpointprocfamilyfun, print.diagppm, print.dppm, print.fii,\n    print.hierarchicalordering, print.influence.ppm, print.interact,\n    print.intermaker, print.isf, print.kppm, print.leverage.ppm,\n    print.lurk, print.minconfit, print.mppm, print.msr, print.objsurf,\n    print.parres, print.plotppm, print.ppm, print.profilepl,\n    print.qqppm, print.rppm, print.slrm, print.summary.dppm,\n    print.summary.fii, print.summary.kppm, print.summary.mppm,\n    print.summary.objsurf, print.summary.ppm, print.summary.slrm,\n    print.vblogit, print.zclustermodel, print.zgibbsmodel, printStatus,\n    printStatusList, profilepl, project.ppm, prune.rppm, pseudoR2,\n    pseudoR2.ppm, pseudoR2.slrm, psib, psib.kppm, psst, psstA, psstG,\n    qqplot.ppm, quad.mppm, quad.ppm, quadBlockSizes, quadrat.test.mppm,\n    quadrat.test.ppm, quadrat.test.slrm, ranef.mppm, rdpp,\n    reach.detpointprocfamily, reach.dppm, reach.fii, reach.interact,\n    reach.kppm, reach.ppm, reach.slrm, reach.zclustermodel,\n    reduceformula, reincarnate.interact, relrisk.ppm, repul,\n    repul.dppm, rescale.msr, resid1panel, resid1plot, resid4plot,\n    residuals.dppm, residuals.kppm, residuals.mppm, residuals.ppm,\n    residuals.slrm, response, response.dppm, response.glm,\n    response.kppm, response.lm, response.mppm, response.ppm,\n    response.slrm, rex, rhohat.ppm, rhohat.slrm, rmh.ppm, rmhmodel.ppm,\n    roc.kppm, roc.ppm, roc.slrm, rotate.msr, rppm, SaddleApprox,\n    safeFiniteValue, safePositiveValue, SatPiece, Saturated,\n    scalardilate.msr, shift.influence.ppm, shift.leverage.ppm,\n    shift.msr, signalStatus, simulate.detpointprocfamily,\n    simulate.dppm, simulate.kppm, simulate.mppm, simulate.ppm,\n    simulate.profilepl, simulate.slrm, slr.prepare,\n    slrAssemblePixelData, slrm, slrmInfluence, Smooth.influence.ppm,\n    Smooth.leverage.ppm, Smooth.msr, Softcore, sp.foundclass,\n    sp.foundclasses, spatialCovariateEvidence.ppm,\n    spatialCovariateEvidence.slrm, spatstatDPPModelInfo, split.msr,\n    splitHybridInteraction, Strauss, strausscounts, StraussHard,\n    stripGLMM, subfits, subfits.new, subfits.old, suffloc, suffstat,\n    suffstat.generic, suffstat.poisson, summary.dppm, summary.fii,\n    summary.kppm, summary.mppm, summary.msr, summary.objsurf,\n    summary.ppm, summary.profilepl, summary.slrm, summary.vblogit,\n    terms.dppm, terms.kppm, terms.mppm, terms.ppm, terms.slrm,\n    thomas.estK, thomas.estpcf, totalVariation, triplet.family,\n    Triplets, tweak.coefs, unitname.dppm, unitname.kppm,\n    unitname.minconfit, unitname.msr, unitname.ppm, unitname.slrm,\n    unitname&lt;-.dppm, unitname&lt;-.kppm, unitname&lt;-.minconfit,\n    unitname&lt;-.msr, unitname&lt;-.ppm, unitname&lt;-.slrm, unstack.msr,\n    update.detpointprocfamily, update.interact, update.ippm,\n    update.kppm, update.msr, update.ppm, update.slrm, valid,\n    valid.detpointprocfamily, valid.ppm, valid.slrm, varcount,\n    varcountEngine, vargamma.estK, vargamma.estpcf, vcov.kppm,\n    vcov.mppm, vcov.ppm, vcov.slrm, versionstring.interact,\n    versionstring.ppm, Window.dppm, Window.influence.ppm, Window.kppm,\n    Window.leverage.ppm, Window.msr, Window.ppm, Window.slrm,\n    windows.mppm, with.msr, zclustermodel, zgibbsmodel\n\n\nThe following objects are masked from 'package:spatstat.explore':\n\n    [.fasp, [.fv, [.localpcfmatrix, [.rat, [.ssf, [&lt;-.fv, $&lt;-.fv,\n    adaptive.density, adjust.ratfv, allstats, alltypes, ang2rad,\n    apply.ssf, as.data.frame.bw.optim, as.data.frame.envelope,\n    as.data.frame.fv, as.function.fv, as.function.rhohat,\n    as.function.ssf, as.fv, as.fv.bw.optim, as.fv.data.frame,\n    as.fv.fasp, as.fv.fv, as.fv.matrix, as.im.scan.test, as.im.ssf,\n    as.owin.quadrattest, as.ppp.ssf, assemble.plot.objects, auc,\n    auc.ppp, bandwidth.is.infinite, BartCalc, berman.test,\n    berman.test.ppp, bermantestCalc, bermantestEngine, bind.fv,\n    bind.ratfv, bits.envelope, bits.test, blur, bw.CvL, bw.CvLHeat,\n    bw.diggle, bw.frac, bw.optim, bw.pcf, bw.ppl, bw.pplHeat,\n    bw.relrisk, bw.scott, bw.scott.iso, bw.smoothppp, bw.stoyan,\n    calc.DR, calc.NNIR, calc.SAVE, calc.SIR, calc.TSE, cbind.fv,\n    cdf.test, cdf.test.ppp, censtimeCDFest, check.testfun, circdensity,\n    circticks, clarkevans, clarkevans.test, clarkevansCalc, clusterset,\n    collapse.anylist, collapse.fv, compatible.fasp, compatible.fv,\n    compatible.rat, compileCDF, compileK, compilepcf, conform.ratfv,\n    contour.ssf, cor.im, cov.im, CressieReadName, CressieReadStatistic,\n    CressieReadSymbol, cutoff2Dkernel, CVforPCF, dclf.progress,\n    dclf.sigtrace, dclf.test, density.ppp, density.ppplist,\n    density.psp, density.splitppp, densityAdaptiveKernel.ppp,\n    densitycrossEngine, densityfun, densityfun.ppp, densityHeat,\n    densityHeat.ppp, densitypointsEngine, densityVoronoi,\n    densityVoronoi.ppp, deriv.fv, Deviation, dg.envelope, dg.progress,\n    dg.sigtrace, dg.test, digestCovariates, digital.volume, dim.fasp,\n    dimhat, dimnames.fasp, dimnames&lt;-.fasp, distcdf, distributecbind,\n    domain.quadrattest, edge.Ripley, edge.Trans, Emark, envelope,\n    envelope.envelope, envelope.hasenvelope, envelope.matrix,\n    envelope.pp3, envelope.ppp, envelopeArray, envelopeEngine,\n    envelopeProgressData, envelopeTest, eval.fasp, eval.fv, evalCovar,\n    evaluate2Dkernel, evaluateCovariate, evaluateCovariateAtPixels,\n    evaluateCovariateAtPoints, exactppm, ExpSmoothLog,\n    extractAtomicQtests, f3Cengine, f3engine, F3est, fasp, Fest,\n    Fhazard, findbestlegendpos, findcbind, Finhom, flatfname,\n    FmultiInhom, FormatFaspFormulae, formula.fv, formula&lt;-,\n    formula&lt;-.fv, fryplot, frypoints, fv, fvexprmap, fvlabelmap,\n    fvlabels, fvlabels&lt;-, fvlegend, fvnames, fvnames&lt;-, g3Cengine,\n    g3engine, G3est, Gcross, Gdot, Gest, getSumFun, Gfox, Ginhom,\n    Gmulti, GmultiInhom, good.correction.K, harmonise.fv, harmonize.fv,\n    hasenvelope, Hest, hopskel, hopskel.test, hotbox, idw, Iest,\n    image.ssf, implemented.for.K, increment.fv, integral.ssf,\n    is.atomicQtest, is.poisson.exactppm, is.scov,\n    is.stationary.exactppm, Jcross, Jdot, Jest, Jfox, Jinhom, Jmulti,\n    k3engine, K3est, Kborder.engine, Kcross, Kcross.inhom, Kdot,\n    Kdot.inhom, Kest, Kest.fft, Kinhom, Kmark, Kmeasure, Kmulti,\n    Kmulti.inhom, Knone.engine, Kount, Krect.engine, Kscaled, Ksector,\n    Kwtsum, laslett, Lcross, Lcross.inhom, Ldot, Ldot.inhom, Lest,\n    Linhom, localK, localKcross, localKcross.inhom, localKdot,\n    localKengine, localKinhom, localKmultiEngine, localL, localLcross,\n    localLcross.inhom, localLdot, localLinhom, localpcf,\n    localpcfengine, localpcfinhom, localpcfmatrix, lohboot,\n    lookup2DkernelInfo, Lscaled, mad.progress, mad.sigtrace, mad.test,\n    makefvlabel, markconnect, markcorr, markcorrint, markcrosscorr,\n    markmarkscatter, markmean, marks.ssf, marks&lt;-.ssf, marktable,\n    markvar, markvario, maskLaslett, match2DkernelName, max.ssf,\n    mctest.progress, mctest.sigtrace, mctestSigtraceEngine, meanlistfv,\n    min.ssf, miplot, names&lt;-.fv, nearest.neighbour, nnclean,\n    nnclean.pp3, nnclean.ppp, nncleanEngine, nncorr, nndensity,\n    nndensity.ppp, nnmean, nnorient, nnvario, pairMean, pairorient,\n    pairs.im, pairs.listof, pairs.solist, panel.contour,\n    panel.histogram, panel.image, pcf, pcf.fasp, pcf.fv, pcf.ppp,\n    pcf3engine, pcf3est, pcfcross, pcfcross.inhom, pcfdot,\n    pcfdot.inhom, pcfinhom, pcfmulti, pcfmulti.inhom, plot.bermantest,\n    plot.bw.frac, plot.bw.optim, plot.cdftest, plot.envelope,\n    plot.fasp, plot.fv, plot.laslett, plot.localpcfmatrix,\n    plot.plotpairsim, plot.quadrattest, plot.rho2hat, plot.rhohat,\n    plot.scan.test, plot.spatialcdf, plot.ssf, plot.studpermutest,\n    polyLaslett, pool, pool.anylist, pool.envelope, pool.fasp, pool.fv,\n    pool.quadrattest, pool.rat, PPversion, predict.exactppm,\n    predict.rho2hat, predict.rhohat, prefixfv, print.bw.frac,\n    print.bw.optim, print.densityfun, print.envelope, print.exactppm,\n    print.fasp, print.fv, print.fvfun, print.hasenvelope,\n    print.laslett, print.localpcfmatrix, print.plotpairsim,\n    print.quadrattest, print.rat, print.rho2hat, print.rhohat,\n    print.Smoothfun, print.ssf, print.summary.ssf, QQversion,\n    quadrat.test, quadrat.test.ppp, quadrat.test.quadratcount,\n    quadrat.test.splitppp, quadrat.testEngine, range.ssf, rat, ratfv,\n    rebadge.as.crossfun, rebadge.as.dotfun, rebadge.fv, rebadgeLabels,\n    reconcile.fv, rectcontact, RelevantDeviation, reload.or.compute,\n    relrisk, relrisk.ppp, rename.fv, resolve.2D.kernel,\n    resolve.foxall.window, resolve.lambda, resolve.reciplambda,\n    resolveEinfo, rho2hat, rhohat, rhohat.ppp, rhohat.quad, rhohatCalc,\n    rhohatEngine, rmax.Rigid, rmax.Ripley, rmax.rule, rmax.Trans, roc,\n    roc.ppp, rocData, rocModel, rose, rose.default, rose.density,\n    rose.fv, rose.histogram, roseContinuous, rotmean, scan.test,\n    scanBinomLRTS, scanLRTS, scanmeasure, scanmeasure.im,\n    scanmeasure.ppp, scanPoisLRTS, sdr, sdr.ppp, sdrPredict,\n    second.moment.calc, second.moment.engine, segregation.test,\n    segregation.test.ppp, sewpcf, sewsmod, sharpen, sharpen.ppp,\n    shift.quadrattest, simulate.rhohat, simulrecipe, Smooth, Smooth.fv,\n    Smooth.im, Smooth.ppp, Smooth.solist, Smooth.ssf,\n    smoothcrossEngine, Smoothfun, Smoothfun.ppp, smoothpointsEngine,\n    spatcov, spatialcdf, spatialCDFframe, spatialCDFtest,\n    spatialCDFtestCalc, spatialCovariateEvidence,\n    spatialCovariateEvidence.exactppm, spatialCovariateEvidence.ppp,\n    sphere.volume, ssf, stienen, stienenSet, studpermu.test,\n    subspaceDistance, summary.envelope, summary.ssf, thresholdCI,\n    thresholdSelect, transect.im, Tstat, tweak.fv.entry,\n    tweak.ratfv.entry, twostage.envelope, twostage.test, unmark.ssf,\n    validate.angles, validate.weights, validate2Dkernel, vanilla.fv,\n    varblock, Vmark, weightedclosepairs, which.max.im,\n    Window.quadrattest, with.fv, with.ssf, X2testEngine\n\n\nThe following objects are masked from 'package:spatstat.univar':\n\n    bw.abram, CDF, CDF.density, densityAdaptiveKernel, dkernel,\n    kaplan.meier, kernel.factor, kernel.moment, kernel.squint, km.rs,\n    km.rs.opt, match.kernel, pkernel, qkernel, quantile.density,\n    reduced.sample, rkernel, stieltjes\n\n# Assuming accidents_sf is your accident data\n\n# Reproject accidents_sf to UTM Zone 47N (EPSG: 32647)\naccidents_projected &lt;- st_transform(accidents_sf, crs = 32647)\n\n# Convert 'incident_datetime' to numeric time (hours since start of study)\naccidents_projected$incident_time_numeric &lt;- as.numeric(difftime(\n  accidents_projected$incident_datetime, min(accidents_projected$incident_datetime), units = \"hours\"))\n\n# Extract spatial coordinates from accidents_sf\ncoords &lt;- st_coordinates(accidents_projected)\n\n# Create a spatstat window (bounding box) from the reprojected coordinates\nwindow &lt;- owin(xrange = range(coords[, 1]), yrange = range(coords[, 2]))\n\n# Convert the data to ppp format (spatstat point pattern object)\naccidents_ppp &lt;- ppp(x = coords[, 1], y = coords[, 2], window = window)\n\nWarning: data contain duplicated points\n\n# Assign temporal marks (time in hours)\nmarks(accidents_ppp) &lt;- data.frame(time = accidents_projected$incident_time_numeric)\n\n# Compute the space-time K-function\nKst &lt;- Kest(accidents_ppp, correction = \"Ripley\")\n\n# Plot the Space-Time K-function result\nplot(Kst, main = \"Space-Time K-function for Road Accidents\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bonus-predictive-modeling-machine-learning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bonus-predictive-modeling-machine-learning",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "# Remove the geometry column by converting the sf object to a regular data frame\naccidents_ml &lt;- accidents_sf %&gt;%\n  dplyr::select(severity, hour, day_of_week, season) %&gt;%\n  st_set_geometry(NULL)  \n# Convert factors to numeric for ML purposes\naccidents_ml$day_of_week &lt;- as.numeric(as.factor(accidents_ml$day_of_week))\naccidents_ml$season &lt;- as.numeric(as.factor(accidents_ml$season))\n\nstr(accidents_ml)\n\ntibble [12,986 × 4] (S3: tbl_df/tbl/data.frame)\n $ severity   : chr [1:12986] \"Medium\" \"Medium\" \"Low\" \"Medium\" ...\n $ hour       : int [1:12986] 2 3 3 3 4 4 5 5 5 6 ...\n $ day_of_week: num [1:12986] 3 3 3 3 3 3 3 3 3 3 ...\n $ season     : num [1:12986] 4 4 4 4 4 4 4 4 4 4 ...\n\n\n\n\n\n\n# Train a basic Random Forest to predict accident severity based on time and seasonal features\nset.seed(123)\nrf_model &lt;- train(severity ~ ., data = accidents_ml, method = \"rf\", trControl = trainControl(method = \"cv\", number = 5))\n\nnote: only 2 unique complexity parameters in default grid. Truncating the grid to 2 .\n\n# Check model performance\nrf_model\n\nRandom Forest \n\n12986 samples\n    3 predictor\n    3 classes: 'High', 'Low', 'Medium' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 10389, 10388, 10389, 10389, 10389 \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n  2     0.5766975  0.06664339\n  3     0.5638371  0.06716721\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 2."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/data/MPSZ-2019.html",
    "href": "In_class_Ex/In_class_Ex01/data/MPSZ-2019.html",
    "title": "In_class Exercise 1",
    "section": "",
    "text": "library(sf)\ndata_cpg &lt;- st_read(“MPSZ-2019.cpg”)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/data/MPSZ-2019.html",
    "href": "In_class_Ex/In_class_Ex02/data/MPSZ-2019.html",
    "title": "In_class Exercise 1",
    "section": "",
    "text": "library(sf)\ndata_cpg &lt;- st_read(“MPSZ-2019.cpg”)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-VAA",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "In this exercise, we will focus on exploring geospatial and aspatial datasets from Hunan province. You will learn how to load, clean, and visualize geospatial data, and combine it with aspatial data to perform basic exploratory data analysis (EDA).\nWe will be working with the following tools and packages: - R for data manipulation and analysis - ggplot2 for data visualization - sf for geospatial data handling - dplyr for data wrangling\n\n\n\nBy the end of this exercise, you should be able to: 1. Load geospatial and aspatial datasets and perform initial exploration. 2. Clean and preprocess geospatial and aspatial data for analysis. 3. Visualize geospatial data using appropriate charts. 4. Draw insights from exploratory data analysis (EDA).\n\n\n\n\n\n# Load necessary libraries\nlibrary(sf)       \n\nWarning: package 'sf' was built under R version 4.2.3\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(ggplot2)  \n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(dplyr)    \n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readr)   \n\n# Load geospatial data\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n# Load aspatial data\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# View the first few rows of the datasets\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi\n4 Changde 21102      Li      County   3.474325 0.18908121      Li\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\nhead(hunan2012)\n\n# A tibble: 6 × 29\n  County City  avg_wage deposite   FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO  Loan\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua  Yiya…    30544   10967  6832.    457.   2703  13225  14567  9277. 3955.\n2 Anren  Chen…    28058    4599. 6386.    221.   1455.  4941. 12761  4189. 2555.\n3 Anxia… Chan…    31935    5517. 3541     244.   1780. 12482  23667  5109. 2807.\n4 Baoji… Huna…    30843    2250  1005.    193.   1379.  4088. 14563  3624. 1254.\n5 Chali… Zhuz…    31251    8241. 6508.    620.   1947  11585  20078  9158. 4287.\n6 Chang… Heng…    28518   10860  7920     770.   2632. 19886  24418 37392  4243.\n# ℹ 18 more variables: NIPCR &lt;dbl&gt;, Bed &lt;dbl&gt;, Emp &lt;dbl&gt;, EmpR &lt;dbl&gt;,\n#   EmpRT &lt;dbl&gt;, Pri_Stu &lt;dbl&gt;, Sec_Stu &lt;dbl&gt;, Household &lt;dbl&gt;,\n#   Household_R &lt;dbl&gt;, NOIP &lt;dbl&gt;, Pop_R &lt;dbl&gt;, RSCG &lt;dbl&gt;, Pop_T &lt;dbl&gt;,\n#   Agri &lt;dbl&gt;, Service &lt;dbl&gt;, Disp_Inc &lt;dbl&gt;, RORP &lt;dbl&gt;, ROREmp &lt;dbl&gt;\n\n\n\n\n\nHow many rows and columns do the datasets contain?\nWhat are the column names and data types for each dataset?\n\n\n# Check the structure and summary of the geospatial data\nstr(hunan)\n\nClasses 'sf' and 'data.frame':  88 obs. of  8 variables:\n $ NAME_2    : chr  \"Changde\" \"Changde\" \"Changde\" \"Changde\" ...\n $ ID_3      : int  21098 21100 21101 21102 21103 21104 21109 21110 21111 21112 ...\n $ NAME_3    : chr  \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n $ ENGTYPE_3 : chr  \"County\" \"County\" \"County City\" \"County\" ...\n $ Shape_Leng: num  1.87 2.36 1.43 3.47 2.29 ...\n $ Shape_Area: num  0.101 0.2 0.053 0.189 0.115 ...\n $ County    : chr  \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n $ geometry  :sfc_POLYGON of length 88; first list element: List of 1\n  ..$ : num [1:427, 1:2] 112 112 112 112 112 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:7] \"NAME_2\" \"ID_3\" \"NAME_3\" \"ENGTYPE_3\" ...\n\nsummary(hunan)\n\n    NAME_2               ID_3          NAME_3           ENGTYPE_3        \n Length:88          Min.   :21098   Length:88          Length:88         \n Class :character   1st Qu.:21125   Class :character   Class :character  \n Mode  :character   Median :21150   Mode  :character   Mode  :character  \n                    Mean   :21150                                        \n                    3rd Qu.:21174                                        \n                    Max.   :21201                                        \n   Shape_Leng       Shape_Area         County                   geometry \n Min.   :0.7722   Min.   :0.02128   Length:88          POLYGON      :88  \n 1st Qu.:2.2533   1st Qu.:0.13669   Class :character   epsg:4326    : 0  \n Median :2.5844   Median :0.18564   Mode  :character   +proj=long...: 0  \n Mean   :2.6057   Mean   :0.19274                                        \n 3rd Qu.:3.0994   3rd Qu.:0.23735                                        \n Max.   :4.5835   Max.   :0.53452                                        \n\n# Check the structure and summary of the aspatial data\nstr(hunan2012)\n\nspc_tbl_ [88 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ County     : chr [1:88] \"Anhua\" \"Anren\" \"Anxiang\" \"Baojing\" ...\n $ City       : chr [1:88] \"Yiyang\" \"Chenzhou\" \"Changde\" \"Hunan West\" ...\n $ avg_wage   : num [1:88] 30544 28058 31935 30843 31251 ...\n $ deposite   : num [1:88] 10967 4599 5517 2250 8241 ...\n $ FAI        : num [1:88] 6832 6386 3541 1005 6508 ...\n $ Gov_Rev    : num [1:88] 457 221 244 193 620 ...\n $ Gov_Exp    : num [1:88] 2703 1455 1780 1379 1947 ...\n $ GDP        : num [1:88] 13225 4941 12482 4088 11585 ...\n $ GDPPC      : num [1:88] 14567 12761 23667 14563 20078 ...\n $ GIO        : num [1:88] 9277 4189 5109 3624 9158 ...\n $ Loan       : num [1:88] 3955 2555 2807 1254 4287 ...\n $ NIPCR      : num [1:88] 3528 3272 7694 4191 3888 ...\n $ Bed        : num [1:88] 2718 970 1931 927 1449 ...\n $ Emp        : num [1:88] 494 291 336 195 330 ...\n $ EmpR       : num [1:88] 441 255 270 146 299 ...\n $ EmpRT      : num [1:88] 338 99.4 205.9 116.4 154 ...\n $ Pri_Stu    : num [1:88] 54.2 33.2 19.6 19.2 33.9 ...\n $ Sec_Stu    : num [1:88] 32.8 17.5 17.8 11.8 20.5 ...\n $ Household  : num [1:88] 290.4 104.6 148.1 73.2 148.7 ...\n $ Household_R: num [1:88] 234.5 121.9 135.4 69.9 139.4 ...\n $ NOIP       : num [1:88] 101 34 53 18 106 115 214 17 55 70 ...\n $ Pop_R      : num [1:88] 670 243 346 184 302 ...\n $ RSCG       : num [1:88] 5761 2386 3958 768 4010 ...\n $ Pop_T      : num [1:88] 911 389 528 281 578 ...\n $ Agri       : num [1:88] 4942 2358 4524 1119 3794 ...\n $ Service    : num [1:88] 5414 3814 14100 542 5444 ...\n $ Disp_Inc   : num [1:88] 12373 16072 16610 13455 20461 ...\n $ RORP       : num [1:88] 0.736 0.626 0.655 0.654 0.521 ...\n $ ROREmp     : num [1:88] 0.893 0.878 0.804 0.746 0.905 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   County = col_character(),\n  ..   City = col_character(),\n  ..   avg_wage = col_double(),\n  ..   deposite = col_double(),\n  ..   FAI = col_double(),\n  ..   Gov_Rev = col_double(),\n  ..   Gov_Exp = col_double(),\n  ..   GDP = col_double(),\n  ..   GDPPC = col_double(),\n  ..   GIO = col_double(),\n  ..   Loan = col_double(),\n  ..   NIPCR = col_double(),\n  ..   Bed = col_double(),\n  ..   Emp = col_double(),\n  ..   EmpR = col_double(),\n  ..   EmpRT = col_double(),\n  ..   Pri_Stu = col_double(),\n  ..   Sec_Stu = col_double(),\n  ..   Household = col_double(),\n  ..   Household_R = col_double(),\n  ..   NOIP = col_double(),\n  ..   Pop_R = col_double(),\n  ..   RSCG = col_double(),\n  ..   Pop_T = col_double(),\n  ..   Agri = col_double(),\n  ..   Service = col_double(),\n  ..   Disp_Inc = col_double(),\n  ..   RORP = col_double(),\n  ..   ROREmp = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(hunan2012)\n\n    County              City              avg_wage        deposite      \n Length:88          Length:88          Min.   :26832   Min.   :  564.1  \n Class :character   Class :character   1st Qu.:31480   1st Qu.: 4306.9  \n Mode  :character   Mode  :character   Median :33070   Median : 6677.3  \n                                       Mean   :33465   Mean   : 7514.1  \n                                       3rd Qu.:34247   3rd Qu.: 9502.6  \n                                       Max.   :54540   Max.   :24332.0  \n      FAI           Gov_Rev          Gov_Exp            GDP       \n Min.   : 1005   Min.   : 108.4   Min.   : 683.6   Min.   : 1490  \n 1st Qu.: 3911   1st Qu.: 307.3   1st Qu.:1451.7   1st Qu.: 5844  \n Median : 6854   Median : 455.2   Median :2037.0   Median :10483  \n Mean   : 9021   Mean   : 646.7   Mean   :2155.9   Mean   :14931  \n 3rd Qu.:10212   3rd Qu.: 637.3   3rd Qu.:2638.1   3rd Qu.:19131  \n Max.   :49234   Max.   :5350.0   Max.   :7885.5   Max.   :88009  \n     GDPPC            GIO              Loan           NIPCR      \n Min.   : 8497   Min.   :   514   Min.   :  358   Min.   : 2895  \n 1st Qu.:14566   1st Qu.:  4965   1st Qu.: 2242   1st Qu.: 3981  \n Median :20433   Median : 10698   Median : 3683   Median : 6119  \n Mean   :24405   Mean   : 19227   Mean   : 4687   Mean   : 7095  \n 3rd Qu.:27224   3rd Qu.: 22223   3rd Qu.: 5082   3rd Qu.: 9768  \n Max.   :88656   Max.   :148976   Max.   :40534   Max.   :17070  \n      Bed            Emp              EmpR           EmpRT      \n Min.   : 392   Min.   : 73.65   Min.   : 62.0   Min.   : 33.6  \n 1st Qu.:1111   1st Qu.:231.56   1st Qu.:191.2   1st Qu.:105.5  \n Median :1642   Median :363.79   Median :284.2   Median :171.2  \n Mean   :1765   Mean   :388.71   Mean   :316.4   Mean   :190.4  \n 3rd Qu.:2240   3rd Qu.:525.04   3rd Qu.:433.5   3rd Qu.:263.5  \n Max.   :6225   Max.   :919.62   Max.   :757.6   Max.   :451.6  \n    Pri_Stu          Sec_Stu         Household       Household_R    \n Min.   :  5.91   Min.   : 3.201   Min.   : 27.15   Min.   : 30.40  \n 1st Qu.: 24.09   1st Qu.:15.095   1st Qu.: 99.15   1st Qu.: 87.95  \n Median : 36.85   Median :24.834   Median :162.85   Median :152.85  \n Mean   : 43.08   Mean   :27.609   Mean   :175.04   Mean   :159.62  \n 3rd Qu.: 58.26   3rd Qu.:36.248   3rd Qu.:245.32   3rd Qu.:218.22  \n Max.   :112.20   Max.   :68.853   Max.   :391.70   Max.   :369.80  \n      NOIP           Pop_R            RSCG             Pop_T       \n Min.   : 10.0   Min.   : 57.7   Min.   :  354.5   Min.   :  92.3  \n 1st Qu.: 47.0   1st Qu.:227.3   1st Qu.: 1757.2   1st Qu.: 333.1  \n Median : 80.5   Median :348.7   Median : 3437.8   Median : 572.5  \n Mean   :107.3   Mean   :369.3   Mean   : 4164.7   Mean   : 586.8  \n 3rd Qu.:124.0   3rd Qu.:517.0   3rd Qu.: 5630.2   3rd Qu.: 792.0  \n Max.   :733.0   Max.   :834.1   Max.   :22604.0   Max.   :1285.5  \n      Agri            Service           Disp_Inc           RORP       \n Min.   :  527.2   Min.   :    5.2   Min.   : 11954   Min.   :0.2357  \n 1st Qu.: 2255.3   1st Qu.: 1576.1   1st Qu.: 14966   1st Qu.:0.5968  \n Median : 3700.7   Median : 5932.5   Median : 18542   Median :0.6517  \n Mean   : 4705.9   Mean   : 8678.9   Mean   : 26133   Mean   :0.6298  \n 3rd Qu.: 6312.9   3rd Qu.:11727.5   3rd Qu.: 21774   3rd Qu.:0.6850  \n Max.   :18328.5   Max.   :53160.0   Max.   :183252   Max.   :0.7606  \n     ROREmp      \n Min.   :0.4545  \n 1st Qu.:0.7565  \n Median :0.8300  \n Mean   :0.8037  \n 3rd Qu.:0.8653  \n Max.   :0.9179  \n\n\n\n\n\n\n\nBefore performing analysis, we need to ensure the datasets are clean. In this section, we will: 1. Handle missing values in the aspatial dataset. 2. Prepare the datasets for spatial analysis.\n\n\n\nCheck for missing values in the aspatial data.\nDecide how to handle them (remove rows, fill with mean/median, etc.).\n\n\n# Check for missing values in the aspatial data\ncolSums(is.na(hunan2012))\n\n     County        City    avg_wage    deposite         FAI     Gov_Rev \n          0           0           0           0           0           0 \n    Gov_Exp         GDP       GDPPC         GIO        Loan       NIPCR \n          0           0           0           0           0           0 \n        Bed         Emp        EmpR       EmpRT     Pri_Stu     Sec_Stu \n          0           0           0           0           0           0 \n  Household Household_R        NOIP       Pop_R        RSCG       Pop_T \n          0           0           0           0           0           0 \n       Agri     Service    Disp_Inc        RORP      ROREmp \n          0           0           0           0           0 \n\n# Remove rows with missing values (as an example)\nhunan2012_clean &lt;- na.omit(hunan2012)\n\n# Verify that missing values have been handled\ncolSums(is.na(hunan2012_clean))\n\n     County        City    avg_wage    deposite         FAI     Gov_Rev \n          0           0           0           0           0           0 \n    Gov_Exp         GDP       GDPPC         GIO        Loan       NIPCR \n          0           0           0           0           0           0 \n        Bed         Emp        EmpR       EmpRT     Pri_Stu     Sec_Stu \n          0           0           0           0           0           0 \n  Household Household_R        NOIP       Pop_R        RSCG       Pop_T \n          0           0           0           0           0           0 \n       Agri     Service    Disp_Inc        RORP      ROREmp \n          0           0           0           0           0 \n\n\n\n\n\n\n\nNow that the data is clean, perform some exploratory data analysis. We’ll focus on exploring the spatial distribution of data.\n\n\nCalculate and display summary statistics for key variables in the aspatial dataset.\n\n# Get summary statistics for numerical columns in the aspatial data\nsummary(hunan2012_clean)\n\n    County              City              avg_wage        deposite      \n Length:88          Length:88          Min.   :26832   Min.   :  564.1  \n Class :character   Class :character   1st Qu.:31480   1st Qu.: 4306.9  \n Mode  :character   Mode  :character   Median :33070   Median : 6677.3  \n                                       Mean   :33465   Mean   : 7514.1  \n                                       3rd Qu.:34247   3rd Qu.: 9502.6  \n                                       Max.   :54540   Max.   :24332.0  \n      FAI           Gov_Rev          Gov_Exp            GDP       \n Min.   : 1005   Min.   : 108.4   Min.   : 683.6   Min.   : 1490  \n 1st Qu.: 3911   1st Qu.: 307.3   1st Qu.:1451.7   1st Qu.: 5844  \n Median : 6854   Median : 455.2   Median :2037.0   Median :10483  \n Mean   : 9021   Mean   : 646.7   Mean   :2155.9   Mean   :14931  \n 3rd Qu.:10212   3rd Qu.: 637.3   3rd Qu.:2638.1   3rd Qu.:19131  \n Max.   :49234   Max.   :5350.0   Max.   :7885.5   Max.   :88009  \n     GDPPC            GIO              Loan           NIPCR      \n Min.   : 8497   Min.   :   514   Min.   :  358   Min.   : 2895  \n 1st Qu.:14566   1st Qu.:  4965   1st Qu.: 2242   1st Qu.: 3981  \n Median :20433   Median : 10698   Median : 3683   Median : 6119  \n Mean   :24405   Mean   : 19227   Mean   : 4687   Mean   : 7095  \n 3rd Qu.:27224   3rd Qu.: 22223   3rd Qu.: 5082   3rd Qu.: 9768  \n Max.   :88656   Max.   :148976   Max.   :40534   Max.   :17070  \n      Bed            Emp              EmpR           EmpRT      \n Min.   : 392   Min.   : 73.65   Min.   : 62.0   Min.   : 33.6  \n 1st Qu.:1111   1st Qu.:231.56   1st Qu.:191.2   1st Qu.:105.5  \n Median :1642   Median :363.79   Median :284.2   Median :171.2  \n Mean   :1765   Mean   :388.71   Mean   :316.4   Mean   :190.4  \n 3rd Qu.:2240   3rd Qu.:525.04   3rd Qu.:433.5   3rd Qu.:263.5  \n Max.   :6225   Max.   :919.62   Max.   :757.6   Max.   :451.6  \n    Pri_Stu          Sec_Stu         Household       Household_R    \n Min.   :  5.91   Min.   : 3.201   Min.   : 27.15   Min.   : 30.40  \n 1st Qu.: 24.09   1st Qu.:15.095   1st Qu.: 99.15   1st Qu.: 87.95  \n Median : 36.85   Median :24.834   Median :162.85   Median :152.85  \n Mean   : 43.08   Mean   :27.609   Mean   :175.04   Mean   :159.62  \n 3rd Qu.: 58.26   3rd Qu.:36.248   3rd Qu.:245.32   3rd Qu.:218.22  \n Max.   :112.20   Max.   :68.853   Max.   :391.70   Max.   :369.80  \n      NOIP           Pop_R            RSCG             Pop_T       \n Min.   : 10.0   Min.   : 57.7   Min.   :  354.5   Min.   :  92.3  \n 1st Qu.: 47.0   1st Qu.:227.3   1st Qu.: 1757.2   1st Qu.: 333.1  \n Median : 80.5   Median :348.7   Median : 3437.8   Median : 572.5  \n Mean   :107.3   Mean   :369.3   Mean   : 4164.7   Mean   : 586.8  \n 3rd Qu.:124.0   3rd Qu.:517.0   3rd Qu.: 5630.2   3rd Qu.: 792.0  \n Max.   :733.0   Max.   :834.1   Max.   :22604.0   Max.   :1285.5  \n      Agri            Service           Disp_Inc           RORP       \n Min.   :  527.2   Min.   :    5.2   Min.   : 11954   Min.   :0.2357  \n 1st Qu.: 2255.3   1st Qu.: 1576.1   1st Qu.: 14966   1st Qu.:0.5968  \n Median : 3700.7   Median : 5932.5   Median : 18542   Median :0.6517  \n Mean   : 4705.9   Mean   : 8678.9   Mean   : 26133   Mean   :0.6298  \n 3rd Qu.: 6312.9   3rd Qu.:11727.5   3rd Qu.: 21774   3rd Qu.:0.6850  \n Max.   :18328.5   Max.   :53160.0   Max.   :183252   Max.   :0.7606  \n     ROREmp      \n Min.   :0.4545  \n 1st Qu.:0.7565  \n Median :0.8300  \n Mean   :0.8037  \n 3rd Qu.:0.8653  \n Max.   :0.9179  \n\n\n\n\n\nCreate visualizations to understand the spatial distribution of the data.\n\n# Plot the spatial distribution of the Hunan geospatial dataset\nggplot(data = hunan) +\n  geom_sf() +\n  labs(title = 'Spatial Distribution of Hunan Region')\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse dplyr to filter, mutate, and summarize data. We’ll link the geospatial and aspatial datasets.\n\n\nJoin the hunan geospatial dataset with the hunan2012_clean aspatial dataset based on a common column (e.g., region name).\n\n# Example: Perform a left join on the datasets based on the region name or a common key\nhunan_combined &lt;- hunan %&gt;%\n  left_join(hunan2012_clean, by = \"County\")\n\n# View the combined data\nhead(hunan_combined)\n\nSimple feature collection with 6 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\n\n\nSummarize the data to find the mean, median, and count of a particular variable (e.g., population, income).\n\n# Summarize the data by a grouping variable (e.g., region)\nsummarized_data &lt;- hunan_combined %&gt;%\n  group_by(County) %&gt;%\n  summarize(mean_income = mean(avg_wage, na.rm = TRUE))\n\n# View the summarized data\nsummarized_data\n\nSimple feature collection with 88 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 3\n   County    mean_income                                                geometry\n   &lt;chr&gt;           &lt;dbl&gt;                                           &lt;POLYGON [°]&gt;\n 1 Anhua           30544 ((111.603 28.63946, 111.6001 28.63997, 111.5957 28.638…\n 2 Anren           28058 ((113.1716 26.82807, 113.1688 26.82901, 113.1639 26.83…\n 3 Anxiang         31935 ((112.0608 29.76031, 112.0602 29.76537, 112.0598 29.77…\n 4 Baojing         30843 ((109.7009 28.83019, 109.7001 28.83364, 109.6996 28.83…\n 5 Chaling         31251 ((113.7685 27.11099, 113.7688 27.11442, 113.7686 27.11…\n 6 Changning       28518 ((112.6115 26.6039, 112.6064 26.60362, 112.6009 26.602…\n 7 Changsha        54540 ((112.9418 28.03516, 112.9427 28.03147, 112.9431 28.02…\n 8 Chengbu         28597 ((110.4426 26.69583, 110.4415 26.6991, 110.4382 26.704…\n 9 Chenxi          33580 ((110.2577 28.22052, 110.2525 28.2212, 110.2474 28.218…\n10 Cili            33099 ((110.8777 29.69041, 110.868 29.6909, 110.8643 29.6922…\n# ℹ 78 more rows\n\n\n\n\n\n\n\nCreate more complex visualizations to explore relationships between variables.\n\n\nCreate a choropleth map to visualize a variable (e.g., income or population) across regions in Hunan.\n\nggplot(hunan_combined) +\n  geom_sf(aes(fill = avg_wage)) +\n  scale_fill_viridis_c() +\n  labs(title = 'Choropleth Map of Average Wage in Hunan Regions', fill = 'Average Wage') +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#introduction",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#introduction",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "In this exercise, we will focus on exploring geospatial and aspatial datasets from Hunan province. You will learn how to load, clean, and visualize geospatial data, and combine it with aspatial data to perform basic exploratory data analysis (EDA).\nWe will be working with the following tools and packages: - R for data manipulation and analysis - ggplot2 for data visualization - sf for geospatial data handling - dplyr for data wrangling"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#learning-objectives",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#learning-objectives",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "By the end of this exercise, you should be able to: 1. Load geospatial and aspatial datasets and perform initial exploration. 2. Clean and preprocess geospatial and aspatial data for analysis. 3. Visualize geospatial data using appropriate charts. 4. Draw insights from exploratory data analysis (EDA)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-1-data-loading-and-inspection",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-1-data-loading-and-inspection",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(sf)       \n\nWarning: package 'sf' was built under R version 4.2.3\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(ggplot2)  \n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(dplyr)    \n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readr)   \n\n# Load geospatial data\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n# Load aspatial data\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# View the first few rows of the datasets\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi\n4 Changde 21102      Li      County   3.474325 0.18908121      Li\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\nhead(hunan2012)\n\n# A tibble: 6 × 29\n  County City  avg_wage deposite   FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO  Loan\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua  Yiya…    30544   10967  6832.    457.   2703  13225  14567  9277. 3955.\n2 Anren  Chen…    28058    4599. 6386.    221.   1455.  4941. 12761  4189. 2555.\n3 Anxia… Chan…    31935    5517. 3541     244.   1780. 12482  23667  5109. 2807.\n4 Baoji… Huna…    30843    2250  1005.    193.   1379.  4088. 14563  3624. 1254.\n5 Chali… Zhuz…    31251    8241. 6508.    620.   1947  11585  20078  9158. 4287.\n6 Chang… Heng…    28518   10860  7920     770.   2632. 19886  24418 37392  4243.\n# ℹ 18 more variables: NIPCR &lt;dbl&gt;, Bed &lt;dbl&gt;, Emp &lt;dbl&gt;, EmpR &lt;dbl&gt;,\n#   EmpRT &lt;dbl&gt;, Pri_Stu &lt;dbl&gt;, Sec_Stu &lt;dbl&gt;, Household &lt;dbl&gt;,\n#   Household_R &lt;dbl&gt;, NOIP &lt;dbl&gt;, Pop_R &lt;dbl&gt;, RSCG &lt;dbl&gt;, Pop_T &lt;dbl&gt;,\n#   Agri &lt;dbl&gt;, Service &lt;dbl&gt;, Disp_Inc &lt;dbl&gt;, RORP &lt;dbl&gt;, ROREmp &lt;dbl&gt;\n\n\n\n\n\nHow many rows and columns do the datasets contain?\nWhat are the column names and data types for each dataset?\n\n\n# Check the structure and summary of the geospatial data\nstr(hunan)\n\nClasses 'sf' and 'data.frame':  88 obs. of  8 variables:\n $ NAME_2    : chr  \"Changde\" \"Changde\" \"Changde\" \"Changde\" ...\n $ ID_3      : int  21098 21100 21101 21102 21103 21104 21109 21110 21111 21112 ...\n $ NAME_3    : chr  \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n $ ENGTYPE_3 : chr  \"County\" \"County\" \"County City\" \"County\" ...\n $ Shape_Leng: num  1.87 2.36 1.43 3.47 2.29 ...\n $ Shape_Area: num  0.101 0.2 0.053 0.189 0.115 ...\n $ County    : chr  \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n $ geometry  :sfc_POLYGON of length 88; first list element: List of 1\n  ..$ : num [1:427, 1:2] 112 112 112 112 112 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:7] \"NAME_2\" \"ID_3\" \"NAME_3\" \"ENGTYPE_3\" ...\n\nsummary(hunan)\n\n    NAME_2               ID_3          NAME_3           ENGTYPE_3        \n Length:88          Min.   :21098   Length:88          Length:88         \n Class :character   1st Qu.:21125   Class :character   Class :character  \n Mode  :character   Median :21150   Mode  :character   Mode  :character  \n                    Mean   :21150                                        \n                    3rd Qu.:21174                                        \n                    Max.   :21201                                        \n   Shape_Leng       Shape_Area         County                   geometry \n Min.   :0.7722   Min.   :0.02128   Length:88          POLYGON      :88  \n 1st Qu.:2.2533   1st Qu.:0.13669   Class :character   epsg:4326    : 0  \n Median :2.5844   Median :0.18564   Mode  :character   +proj=long...: 0  \n Mean   :2.6057   Mean   :0.19274                                        \n 3rd Qu.:3.0994   3rd Qu.:0.23735                                        \n Max.   :4.5835   Max.   :0.53452                                        \n\n# Check the structure and summary of the aspatial data\nstr(hunan2012)\n\nspc_tbl_ [88 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ County     : chr [1:88] \"Anhua\" \"Anren\" \"Anxiang\" \"Baojing\" ...\n $ City       : chr [1:88] \"Yiyang\" \"Chenzhou\" \"Changde\" \"Hunan West\" ...\n $ avg_wage   : num [1:88] 30544 28058 31935 30843 31251 ...\n $ deposite   : num [1:88] 10967 4599 5517 2250 8241 ...\n $ FAI        : num [1:88] 6832 6386 3541 1005 6508 ...\n $ Gov_Rev    : num [1:88] 457 221 244 193 620 ...\n $ Gov_Exp    : num [1:88] 2703 1455 1780 1379 1947 ...\n $ GDP        : num [1:88] 13225 4941 12482 4088 11585 ...\n $ GDPPC      : num [1:88] 14567 12761 23667 14563 20078 ...\n $ GIO        : num [1:88] 9277 4189 5109 3624 9158 ...\n $ Loan       : num [1:88] 3955 2555 2807 1254 4287 ...\n $ NIPCR      : num [1:88] 3528 3272 7694 4191 3888 ...\n $ Bed        : num [1:88] 2718 970 1931 927 1449 ...\n $ Emp        : num [1:88] 494 291 336 195 330 ...\n $ EmpR       : num [1:88] 441 255 270 146 299 ...\n $ EmpRT      : num [1:88] 338 99.4 205.9 116.4 154 ...\n $ Pri_Stu    : num [1:88] 54.2 33.2 19.6 19.2 33.9 ...\n $ Sec_Stu    : num [1:88] 32.8 17.5 17.8 11.8 20.5 ...\n $ Household  : num [1:88] 290.4 104.6 148.1 73.2 148.7 ...\n $ Household_R: num [1:88] 234.5 121.9 135.4 69.9 139.4 ...\n $ NOIP       : num [1:88] 101 34 53 18 106 115 214 17 55 70 ...\n $ Pop_R      : num [1:88] 670 243 346 184 302 ...\n $ RSCG       : num [1:88] 5761 2386 3958 768 4010 ...\n $ Pop_T      : num [1:88] 911 389 528 281 578 ...\n $ Agri       : num [1:88] 4942 2358 4524 1119 3794 ...\n $ Service    : num [1:88] 5414 3814 14100 542 5444 ...\n $ Disp_Inc   : num [1:88] 12373 16072 16610 13455 20461 ...\n $ RORP       : num [1:88] 0.736 0.626 0.655 0.654 0.521 ...\n $ ROREmp     : num [1:88] 0.893 0.878 0.804 0.746 0.905 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   County = col_character(),\n  ..   City = col_character(),\n  ..   avg_wage = col_double(),\n  ..   deposite = col_double(),\n  ..   FAI = col_double(),\n  ..   Gov_Rev = col_double(),\n  ..   Gov_Exp = col_double(),\n  ..   GDP = col_double(),\n  ..   GDPPC = col_double(),\n  ..   GIO = col_double(),\n  ..   Loan = col_double(),\n  ..   NIPCR = col_double(),\n  ..   Bed = col_double(),\n  ..   Emp = col_double(),\n  ..   EmpR = col_double(),\n  ..   EmpRT = col_double(),\n  ..   Pri_Stu = col_double(),\n  ..   Sec_Stu = col_double(),\n  ..   Household = col_double(),\n  ..   Household_R = col_double(),\n  ..   NOIP = col_double(),\n  ..   Pop_R = col_double(),\n  ..   RSCG = col_double(),\n  ..   Pop_T = col_double(),\n  ..   Agri = col_double(),\n  ..   Service = col_double(),\n  ..   Disp_Inc = col_double(),\n  ..   RORP = col_double(),\n  ..   ROREmp = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(hunan2012)\n\n    County              City              avg_wage        deposite      \n Length:88          Length:88          Min.   :26832   Min.   :  564.1  \n Class :character   Class :character   1st Qu.:31480   1st Qu.: 4306.9  \n Mode  :character   Mode  :character   Median :33070   Median : 6677.3  \n                                       Mean   :33465   Mean   : 7514.1  \n                                       3rd Qu.:34247   3rd Qu.: 9502.6  \n                                       Max.   :54540   Max.   :24332.0  \n      FAI           Gov_Rev          Gov_Exp            GDP       \n Min.   : 1005   Min.   : 108.4   Min.   : 683.6   Min.   : 1490  \n 1st Qu.: 3911   1st Qu.: 307.3   1st Qu.:1451.7   1st Qu.: 5844  \n Median : 6854   Median : 455.2   Median :2037.0   Median :10483  \n Mean   : 9021   Mean   : 646.7   Mean   :2155.9   Mean   :14931  \n 3rd Qu.:10212   3rd Qu.: 637.3   3rd Qu.:2638.1   3rd Qu.:19131  \n Max.   :49234   Max.   :5350.0   Max.   :7885.5   Max.   :88009  \n     GDPPC            GIO              Loan           NIPCR      \n Min.   : 8497   Min.   :   514   Min.   :  358   Min.   : 2895  \n 1st Qu.:14566   1st Qu.:  4965   1st Qu.: 2242   1st Qu.: 3981  \n Median :20433   Median : 10698   Median : 3683   Median : 6119  \n Mean   :24405   Mean   : 19227   Mean   : 4687   Mean   : 7095  \n 3rd Qu.:27224   3rd Qu.: 22223   3rd Qu.: 5082   3rd Qu.: 9768  \n Max.   :88656   Max.   :148976   Max.   :40534   Max.   :17070  \n      Bed            Emp              EmpR           EmpRT      \n Min.   : 392   Min.   : 73.65   Min.   : 62.0   Min.   : 33.6  \n 1st Qu.:1111   1st Qu.:231.56   1st Qu.:191.2   1st Qu.:105.5  \n Median :1642   Median :363.79   Median :284.2   Median :171.2  \n Mean   :1765   Mean   :388.71   Mean   :316.4   Mean   :190.4  \n 3rd Qu.:2240   3rd Qu.:525.04   3rd Qu.:433.5   3rd Qu.:263.5  \n Max.   :6225   Max.   :919.62   Max.   :757.6   Max.   :451.6  \n    Pri_Stu          Sec_Stu         Household       Household_R    \n Min.   :  5.91   Min.   : 3.201   Min.   : 27.15   Min.   : 30.40  \n 1st Qu.: 24.09   1st Qu.:15.095   1st Qu.: 99.15   1st Qu.: 87.95  \n Median : 36.85   Median :24.834   Median :162.85   Median :152.85  \n Mean   : 43.08   Mean   :27.609   Mean   :175.04   Mean   :159.62  \n 3rd Qu.: 58.26   3rd Qu.:36.248   3rd Qu.:245.32   3rd Qu.:218.22  \n Max.   :112.20   Max.   :68.853   Max.   :391.70   Max.   :369.80  \n      NOIP           Pop_R            RSCG             Pop_T       \n Min.   : 10.0   Min.   : 57.7   Min.   :  354.5   Min.   :  92.3  \n 1st Qu.: 47.0   1st Qu.:227.3   1st Qu.: 1757.2   1st Qu.: 333.1  \n Median : 80.5   Median :348.7   Median : 3437.8   Median : 572.5  \n Mean   :107.3   Mean   :369.3   Mean   : 4164.7   Mean   : 586.8  \n 3rd Qu.:124.0   3rd Qu.:517.0   3rd Qu.: 5630.2   3rd Qu.: 792.0  \n Max.   :733.0   Max.   :834.1   Max.   :22604.0   Max.   :1285.5  \n      Agri            Service           Disp_Inc           RORP       \n Min.   :  527.2   Min.   :    5.2   Min.   : 11954   Min.   :0.2357  \n 1st Qu.: 2255.3   1st Qu.: 1576.1   1st Qu.: 14966   1st Qu.:0.5968  \n Median : 3700.7   Median : 5932.5   Median : 18542   Median :0.6517  \n Mean   : 4705.9   Mean   : 8678.9   Mean   : 26133   Mean   :0.6298  \n 3rd Qu.: 6312.9   3rd Qu.:11727.5   3rd Qu.: 21774   3rd Qu.:0.6850  \n Max.   :18328.5   Max.   :53160.0   Max.   :183252   Max.   :0.7606  \n     ROREmp      \n Min.   :0.4545  \n 1st Qu.:0.7565  \n Median :0.8300  \n Mean   :0.8037  \n 3rd Qu.:0.8653  \n Max.   :0.9179"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-2-data-cleaning",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-2-data-cleaning",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "Before performing analysis, we need to ensure the datasets are clean. In this section, we will: 1. Handle missing values in the aspatial dataset. 2. Prepare the datasets for spatial analysis.\n\n\n\nCheck for missing values in the aspatial data.\nDecide how to handle them (remove rows, fill with mean/median, etc.).\n\n\n# Check for missing values in the aspatial data\ncolSums(is.na(hunan2012))\n\n     County        City    avg_wage    deposite         FAI     Gov_Rev \n          0           0           0           0           0           0 \n    Gov_Exp         GDP       GDPPC         GIO        Loan       NIPCR \n          0           0           0           0           0           0 \n        Bed         Emp        EmpR       EmpRT     Pri_Stu     Sec_Stu \n          0           0           0           0           0           0 \n  Household Household_R        NOIP       Pop_R        RSCG       Pop_T \n          0           0           0           0           0           0 \n       Agri     Service    Disp_Inc        RORP      ROREmp \n          0           0           0           0           0 \n\n# Remove rows with missing values (as an example)\nhunan2012_clean &lt;- na.omit(hunan2012)\n\n# Verify that missing values have been handled\ncolSums(is.na(hunan2012_clean))\n\n     County        City    avg_wage    deposite         FAI     Gov_Rev \n          0           0           0           0           0           0 \n    Gov_Exp         GDP       GDPPC         GIO        Loan       NIPCR \n          0           0           0           0           0           0 \n        Bed         Emp        EmpR       EmpRT     Pri_Stu     Sec_Stu \n          0           0           0           0           0           0 \n  Household Household_R        NOIP       Pop_R        RSCG       Pop_T \n          0           0           0           0           0           0 \n       Agri     Service    Disp_Inc        RORP      ROREmp \n          0           0           0           0           0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-3-exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-3-exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "Now that the data is clean, perform some exploratory data analysis. We’ll focus on exploring the spatial distribution of data.\n\n\nCalculate and display summary statistics for key variables in the aspatial dataset.\n\n# Get summary statistics for numerical columns in the aspatial data\nsummary(hunan2012_clean)\n\n    County              City              avg_wage        deposite      \n Length:88          Length:88          Min.   :26832   Min.   :  564.1  \n Class :character   Class :character   1st Qu.:31480   1st Qu.: 4306.9  \n Mode  :character   Mode  :character   Median :33070   Median : 6677.3  \n                                       Mean   :33465   Mean   : 7514.1  \n                                       3rd Qu.:34247   3rd Qu.: 9502.6  \n                                       Max.   :54540   Max.   :24332.0  \n      FAI           Gov_Rev          Gov_Exp            GDP       \n Min.   : 1005   Min.   : 108.4   Min.   : 683.6   Min.   : 1490  \n 1st Qu.: 3911   1st Qu.: 307.3   1st Qu.:1451.7   1st Qu.: 5844  \n Median : 6854   Median : 455.2   Median :2037.0   Median :10483  \n Mean   : 9021   Mean   : 646.7   Mean   :2155.9   Mean   :14931  \n 3rd Qu.:10212   3rd Qu.: 637.3   3rd Qu.:2638.1   3rd Qu.:19131  \n Max.   :49234   Max.   :5350.0   Max.   :7885.5   Max.   :88009  \n     GDPPC            GIO              Loan           NIPCR      \n Min.   : 8497   Min.   :   514   Min.   :  358   Min.   : 2895  \n 1st Qu.:14566   1st Qu.:  4965   1st Qu.: 2242   1st Qu.: 3981  \n Median :20433   Median : 10698   Median : 3683   Median : 6119  \n Mean   :24405   Mean   : 19227   Mean   : 4687   Mean   : 7095  \n 3rd Qu.:27224   3rd Qu.: 22223   3rd Qu.: 5082   3rd Qu.: 9768  \n Max.   :88656   Max.   :148976   Max.   :40534   Max.   :17070  \n      Bed            Emp              EmpR           EmpRT      \n Min.   : 392   Min.   : 73.65   Min.   : 62.0   Min.   : 33.6  \n 1st Qu.:1111   1st Qu.:231.56   1st Qu.:191.2   1st Qu.:105.5  \n Median :1642   Median :363.79   Median :284.2   Median :171.2  \n Mean   :1765   Mean   :388.71   Mean   :316.4   Mean   :190.4  \n 3rd Qu.:2240   3rd Qu.:525.04   3rd Qu.:433.5   3rd Qu.:263.5  \n Max.   :6225   Max.   :919.62   Max.   :757.6   Max.   :451.6  \n    Pri_Stu          Sec_Stu         Household       Household_R    \n Min.   :  5.91   Min.   : 3.201   Min.   : 27.15   Min.   : 30.40  \n 1st Qu.: 24.09   1st Qu.:15.095   1st Qu.: 99.15   1st Qu.: 87.95  \n Median : 36.85   Median :24.834   Median :162.85   Median :152.85  \n Mean   : 43.08   Mean   :27.609   Mean   :175.04   Mean   :159.62  \n 3rd Qu.: 58.26   3rd Qu.:36.248   3rd Qu.:245.32   3rd Qu.:218.22  \n Max.   :112.20   Max.   :68.853   Max.   :391.70   Max.   :369.80  \n      NOIP           Pop_R            RSCG             Pop_T       \n Min.   : 10.0   Min.   : 57.7   Min.   :  354.5   Min.   :  92.3  \n 1st Qu.: 47.0   1st Qu.:227.3   1st Qu.: 1757.2   1st Qu.: 333.1  \n Median : 80.5   Median :348.7   Median : 3437.8   Median : 572.5  \n Mean   :107.3   Mean   :369.3   Mean   : 4164.7   Mean   : 586.8  \n 3rd Qu.:124.0   3rd Qu.:517.0   3rd Qu.: 5630.2   3rd Qu.: 792.0  \n Max.   :733.0   Max.   :834.1   Max.   :22604.0   Max.   :1285.5  \n      Agri            Service           Disp_Inc           RORP       \n Min.   :  527.2   Min.   :    5.2   Min.   : 11954   Min.   :0.2357  \n 1st Qu.: 2255.3   1st Qu.: 1576.1   1st Qu.: 14966   1st Qu.:0.5968  \n Median : 3700.7   Median : 5932.5   Median : 18542   Median :0.6517  \n Mean   : 4705.9   Mean   : 8678.9   Mean   : 26133   Mean   :0.6298  \n 3rd Qu.: 6312.9   3rd Qu.:11727.5   3rd Qu.: 21774   3rd Qu.:0.6850  \n Max.   :18328.5   Max.   :53160.0   Max.   :183252   Max.   :0.7606  \n     ROREmp      \n Min.   :0.4545  \n 1st Qu.:0.7565  \n Median :0.8300  \n Mean   :0.8037  \n 3rd Qu.:0.8653  \n Max.   :0.9179  \n\n\n\n\n\nCreate visualizations to understand the spatial distribution of the data.\n\n# Plot the spatial distribution of the Hunan geospatial dataset\nggplot(data = hunan) +\n  geom_sf() +\n  labs(title = 'Spatial Distribution of Hunan Region')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-4-data-wrangling-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-4-data-wrangling-with-dplyr",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "Use dplyr to filter, mutate, and summarize data. We’ll link the geospatial and aspatial datasets.\n\n\nJoin the hunan geospatial dataset with the hunan2012_clean aspatial dataset based on a common column (e.g., region name).\n\n# Example: Perform a left join on the datasets based on the region name or a common key\nhunan_combined &lt;- hunan %&gt;%\n  left_join(hunan2012_clean, by = \"County\")\n\n# View the combined data\nhead(hunan_combined)\n\nSimple feature collection with 6 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\n\n\nSummarize the data to find the mean, median, and count of a particular variable (e.g., population, income).\n\n# Summarize the data by a grouping variable (e.g., region)\nsummarized_data &lt;- hunan_combined %&gt;%\n  group_by(County) %&gt;%\n  summarize(mean_income = mean(avg_wage, na.rm = TRUE))\n\n# View the summarized data\nsummarized_data\n\nSimple feature collection with 88 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 3\n   County    mean_income                                                geometry\n   &lt;chr&gt;           &lt;dbl&gt;                                           &lt;POLYGON [°]&gt;\n 1 Anhua           30544 ((111.603 28.63946, 111.6001 28.63997, 111.5957 28.638…\n 2 Anren           28058 ((113.1716 26.82807, 113.1688 26.82901, 113.1639 26.83…\n 3 Anxiang         31935 ((112.0608 29.76031, 112.0602 29.76537, 112.0598 29.77…\n 4 Baojing         30843 ((109.7009 28.83019, 109.7001 28.83364, 109.6996 28.83…\n 5 Chaling         31251 ((113.7685 27.11099, 113.7688 27.11442, 113.7686 27.11…\n 6 Changning       28518 ((112.6115 26.6039, 112.6064 26.60362, 112.6009 26.602…\n 7 Changsha        54540 ((112.9418 28.03516, 112.9427 28.03147, 112.9431 28.02…\n 8 Chengbu         28597 ((110.4426 26.69583, 110.4415 26.6991, 110.4382 26.704…\n 9 Chenxi          33580 ((110.2577 28.22052, 110.2525 28.2212, 110.2474 28.218…\n10 Cili            33099 ((110.8777 29.69041, 110.868 29.6909, 110.8643 29.6922…\n# ℹ 78 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-5-data-visualization-with-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#part-5-data-visualization-with-ggplot2",
    "title": "Hands-on Exercise 05",
    "section": "",
    "text": "Create more complex visualizations to explore relationships between variables.\n\n\nCreate a choropleth map to visualize a variable (e.g., income or population) across regions in Hunan.\n\nggplot(hunan_combined) +\n  geom_sf(aes(fill = avg_wage)) +\n  scale_fill_viridis_c() +\n  labs(title = 'Choropleth Map of Average Wage in Hunan Regions', fill = 'Average Wage') +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Installing and launching the R packages\n\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n\nData Import and Preparation\n\nnetwork &lt;- st_read(dsn=\"geospatial\", \n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex03/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\nchildcare &lt;- st_read(dsn=\"geospatial\",\n                     layer=\"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex03/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\nVisualising the Geospatial Data\n\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch = 19)\n\n\n\n\n\n\n\n\nNetwork KDE (NKDE) Analysis\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) + \n  tm_dots() + \n  tm_shape(network) +\n  tm_lines()\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nNetwork KDE (NKDE) Analysis\n\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 375)\n\n\nlibrary(sf)\n\n# Convert to segments\nlixels &lt;- st_segmentize(network, dfMaxLength = 700)  # max length per segment\n\n# Plot the segmented network\nplot(lixels)\n\n\n\n\n\n\n\n\n\n#samples &lt;- lines_center(lixels) \n\n# Extract only the geometry column (ignoring the attributes)\nlixel_geoms &lt;- st_geometry(lixels)\n\n# Compute centroids of the geometries\nsamples &lt;- st_centroid(lixel_geoms)\n\n# Plot the original lixels and their centroids\nplot(lixel_geoms, col = 'gray', lwd = 2)  # Plot the original line segments\nplot(samples, col = 'blue', pch = 20, add = TRUE)  # Add centroid points\n\n\n\n\n\n\n\n\n\n# Extract X and Y coordinates from centroids for distance calculations\n# Convert the 'samples' (sf points) into a matrix of coordinates\ncentroid_coords &lt;- st_coordinates(samples)\n\n# Calculate distances between consecutive centroids\n# We use Euclidean distance formula on the X and Y coordinates\ndistances &lt;- sqrt(diff(centroid_coords[, \"X\"])^2 + diff(centroid_coords[, \"Y\"])^2)\n\n# Inspect the calculated distances\ndistances\n\n   [1]   36.245934  629.557166   47.761815 1446.616517    9.603660   11.140751\n   [7]  342.775731   22.537590  294.393176   20.595455 2340.720379   91.316685\n  [13]  101.307156  391.091738   56.799281   59.064044 1734.472172  389.335947\n  [19]   20.901042   12.927022  356.722826   18.115690   16.908444   20.402002\n  [25]  495.567564   21.597865   64.116770   59.806882   21.180760   47.380007\n  [31]   23.225064  912.837903   27.430974  535.461630   33.757086   23.428959\n  [37]  533.585218  547.013682   27.966986   47.568726  538.509948   23.460171\n  [43]   43.823619  353.785568  399.650273  613.621323   24.525808   17.670043\n  [49]   17.170404  889.941913   18.835753  286.822315  536.120687  915.966217\n  [55]  535.959289 1059.797915   19.358048   18.804658   36.180185   27.657101\n  [61]   31.255435   49.097907   70.589128   28.779583   23.459535  560.539763\n  [67]  125.408776   44.120441   18.278790   17.855781   30.427633   17.589624\n  [73]  113.139140  116.389416  156.297016  705.623939   38.419314  419.905951\n  [79] 1128.114182  149.364619  347.472105   25.728795   15.639689   18.400197\n  [85]   20.772772   22.365592   17.855777   17.434534   47.799558 1334.550123\n  [91]    7.985574 1667.934586   23.565783   30.791375   23.760255 1478.317005\n  [97] 1458.274710   49.428474   12.142945   50.908097   30.119543    8.454219\n [103]   19.755601    9.219024 1249.173668  612.054283   29.973321   11.161803\n [109]   43.277954  399.309372  728.958433  361.310802   21.259752   11.083164\n [115]   26.747183   11.683362  340.407454   16.450153 2516.174078 2490.733214\n [121]  934.467652  166.512621    9.500829  592.614146   53.049058   69.377513\n [127]  188.516618  192.883388   48.615062  137.801250  194.736371  101.276516\n [133]   91.354361   51.457593  148.248471   70.738033  159.600134  277.344126\n [139]  183.574951   33.495443  719.565283   37.161489   27.023452   22.030437\n [145]   21.899811   25.432046  216.564778 1197.940390  155.544691  136.231401\n [151]   28.404476  498.402984   15.520455  123.652193   38.046074  754.479445\n [157]  325.934559  395.849931   33.536937   26.735477  275.133951   98.413889\n [163]  548.990710  146.199644  205.394460  548.056418  172.533494  273.661816\n [169]  170.114235  924.216219  785.607386  202.791204   28.694869   77.318457\n [175]  122.824685   77.285681  624.609695  726.327533  600.970403 1057.527576\n [181]   89.128389 2276.599691 1678.032223  503.979583  938.325927  100.875014\n [187]   58.601204  134.999176   83.453809 1837.945492 1792.212065  421.108381\n [193]  409.509893   33.636323   26.921861   28.993411  736.699025  138.861825\n [199]  981.213866 1086.540188  481.068916   97.451571 1146.078929   23.664507\n [205]   20.008663   30.275709 1298.805456   30.596518  934.899404 1298.744364\n [211]   55.974267 1553.372667   76.794576  414.578383 1569.752409 2701.147914\n [217]   27.657730   60.132944   75.488197   19.176441   36.697051   18.815689\n [223]   36.008505 2129.952773  343.089612   13.981626  335.162330   36.224402\n [229]  133.209873   16.130767   44.534900 1380.304971 2284.363400   16.477060\n [235] 1179.521407 1075.583083   26.594718  311.156323  211.134561   24.169245\n [241]   13.833073    7.187376   20.435167   44.757738   29.630749  208.751649\n [247]  169.651398  296.991725  291.128314   12.927000    7.964646   20.885597\n [253]   21.518551   12.983999   24.980314   24.706654   18.083520   49.221958\n [259]   39.624654  304.187431   23.969090   13.958285   26.062344   27.870914\n [265]   23.352293  692.047157    9.500829  444.495492  107.076689   29.047795\n [271]   20.544730   15.147164    9.082154  245.444308   11.243646   18.333767\n [277]   14.424547  515.340168   13.038018   10.880631 1014.587711   25.642530\n [283]  333.470194  351.703041  147.528300  767.887759   22.001614   14.579329\n [289]   25.558218   19.428338   11.981650   25.150735  223.737266  126.820769\n [295]  258.687384   53.441186    8.312372   10.002539  212.137456   35.320761\n [301]   69.311702   10.197234  214.576351  279.465394   51.893194   26.758267\n [307]   34.057385   69.607858   52.265371 1404.269346  157.351666  102.378737\n [313]   28.109928   41.118649   42.399320   18.951046   19.331127   18.951046\n [319]   39.275671   19.515089  431.999734   10.342030   11.094573    5.006893\n [325]   31.986342   16.933904   15.848646   71.752439   38.707851   16.648945\n [331]   84.778938   47.700153   67.943127   28.169723  137.617367   27.730858\n [337]   17.269672  250.187566  142.875381   97.415008   94.170377   64.935117\n [343]   40.918890  249.149462   17.478243   13.760247  167.987402   16.423407\n [349]  354.444780    7.721539    9.827688   50.222177    8.509322    8.995711\n [355]    9.056109   14.328897    8.044655    9.734905    7.964676   13.878867\n [361]    6.952398    9.095845   95.370688   16.529279    6.485189    7.343694\n [367]   70.576627   12.222559   14.216144   13.102801   27.217571    6.801774\n [373]   34.185612    6.460634   88.538603   12.525992  677.442369   10.550862\n [379]   14.385256   58.026338 1061.203343   40.587344 1011.896939   11.683376\n [385]   16.368640  150.560791   10.496842  110.878654   20.333674   11.383139\n [391]   11.047176    9.541719  135.696419  176.808512  285.037578  340.630129\n [397]   70.080795   55.601724   85.494362   51.739764   43.020519   14.159539\n [403]   13.525141   53.411410   58.107423   46.627090   71.922603   46.291551\n [409]   42.599176   24.214414   37.771149   30.188677   21.608317   96.596658\n [415]   26.674237   45.551067  562.111921   16.990814    9.386426   12.164654\n [421]   28.391123   19.002529   45.330147   63.517093   23.774700   80.742129\n [427]  137.509756    8.779804   55.212505   12.550469   37.662823    7.918212\n [433]    5.111181    3.727912   13.616485   16.990817   11.296583  163.612483\n [439]  274.750259   13.880270  342.097379   22.782736    8.791375   11.420485\n [445]  107.184974  142.160015   29.356233   18.075776   14.514267   33.432874\n [451]   26.873678    5.992133    5.957977    6.783015  111.676062   26.035157\n [457]   49.317222  199.417448    7.878157    7.056548    7.694808  392.239341\n [463]   26.031156  109.014752   39.026279 1684.165889   39.851126   15.776300\n [469]   24.548909  218.106587    9.902889   12.146814   91.968874   26.945526\n [475]  272.963072   12.482405  209.556144   13.123951  112.851601   10.997474\n [481]  268.532081    9.623752  261.661200    6.687794  352.503473  523.739391\n [487]   24.292709  179.812195  601.132054   75.178184   86.856159   35.272787\n [493]   76.091893   91.112250   56.254848   60.047045   26.448943   55.465010\n [499]   73.548453   20.514783   19.310475  381.378799   67.338826   44.712786\n [505]  274.838732   30.163120   10.257010    9.665554   43.677139   49.589495\n [511]  338.417051   48.786871   46.407541   51.459611   47.895667   39.823281\n [517]   75.136545  109.473336  496.167507   39.053734   29.648610   16.130772\n [523]   14.511548    7.870325   99.776354   57.744196   23.026836  119.379460\n [529]   27.760518    6.970999    6.970233  382.977376   28.205848   25.427092\n [535]   23.511407   86.068023   87.359006    7.608888  330.409603   10.686842\n [541]    5.490818   32.871348   64.193838   68.028602    9.967297    8.669015\n [547]   62.353936   59.160347  172.427126    7.119369  207.782620   29.113306\n [553]   44.878718   23.583424   27.025752   10.274150   69.804506   46.428852\n [559]   22.695184   36.999545   11.022405   11.554038  684.655198    9.459349\n [565]   96.439539   11.245687   34.980809   51.758849   30.148887  117.969945\n [571]    7.269492   97.255322  135.205733  100.624740   92.571270  167.104574\n [577]   23.366733   17.175220  133.053925   28.725232   18.292232   16.087554\n [583]   33.889363   41.639694   27.863110   99.023403  327.443535   21.563678\n [589]   12.569911   17.565205   88.173347   22.540894  165.795282    6.681461\n [595]    9.713704   94.534833   26.158167   16.748840  154.452727   44.586982\n [601]    9.046134   11.613163   14.446709   50.565851   21.125085   23.577038\n [607]   32.806499  269.554180   59.203996   21.762559   71.501330   54.571954\n [613]  120.217849   78.767033   60.612775  322.502856   40.809075   20.404538\n [619]   63.947247   21.610693   80.183815   45.309613   66.094581   21.256754\n [625]   20.440886   19.927002   15.299055  249.076885  120.266369    7.564135\n [631]    7.888162  184.288099   14.444023    8.248080    5.096099   93.567336\n [637]   43.898963   45.860503   41.974535   40.889413    5.893575   23.242784\n [643]  156.867653   33.914799   17.649824    8.053905   41.347108  216.394600\n [649]  128.379756   67.692682  202.144885   73.619141  468.148838   21.666040\n [655]   11.787151  122.598890   46.700638  163.811575  212.487981  409.344221\n [661]  234.897163   70.417271  368.330160   24.109690   14.179562  296.755772\n [667]  313.420663  107.661087   52.568401  562.847014   48.308430   66.270387\n [673]  169.474644    9.476949   10.000681   11.491596  161.938283  146.574272\n [679]   55.486568   35.302590   37.568930   41.592631  236.542318  512.009221\n [685]   29.485976   67.014859   43.017171    4.004619    6.671373   41.679579\n [691]  101.016604  219.576780   68.821896   52.950613  170.356643   39.253077\n [697]  176.586617  221.607455   53.450724   23.774810   58.744474   75.832350\n [703]   39.676729  122.191443   21.061925   26.216241   64.085667   16.681488\n [709]  171.858669  111.452617 1276.285474 1674.869352  117.510211   59.291115\n [715]   43.085184  122.029313   17.807307   11.103033   39.506387 1554.108184\n [721]  698.503453  464.211818   12.774621  821.148747   47.229767  632.990001\n [727]  143.493474   67.937105  470.467453  659.492179  231.004726  182.669168\n [733]  414.321137  175.691246   74.872628  834.149640   18.900882   80.756556\n [739]  258.772704  482.941569  580.383200  488.115436 2778.837231   42.440740\n [745]   22.716759   64.391170  108.821582   23.992028   20.920390   20.131174\n [751]   44.303445   44.303443   24.098838  233.612726   36.811325   36.043814\n [757]   54.005597   53.224746  165.648908   61.530438   16.130802  317.285976\n [763]   25.316249   69.180235   43.085479   26.094785   60.788186   68.842701\n [769]   29.702449   68.993575   82.438297   51.181912  205.641775   72.275673\n [775]   17.598942   29.098699 1169.563704 1111.324802   62.619035   16.624778\n [781]  316.632576   15.433555  106.774518   52.531146  232.231417   36.185004\n [787] 1454.574358  100.428229  116.543093  479.160082   29.807364   33.839053\n [793]  109.632920   62.379678   30.322565   84.669460  203.733475   23.274556\n [799]  131.244580   35.986100 1529.385018   39.395859  180.077411   86.544953\n [805]  752.836975   34.532666  124.746871   21.429918   28.091566  377.081488\n [811]   33.561073   32.716830   14.911609  266.492508  112.005485   77.363624\n [817]   39.648652  138.007978  209.119418   34.465741   40.161811   37.461627\n [823]   16.154235  546.341135   52.010094   23.772717  648.438957   35.349668\n [829]   61.206008   44.166577  496.502319   32.436707   17.087165  200.510693\n [835]   19.065482  484.216703  583.102196   28.304563   30.535405   22.571036\n [841]  514.355255   29.325938   24.424770  120.843227  109.904869  110.893209\n [847]   52.926490   38.424231  888.264725  114.027866   28.869968   55.410021\n [853]  171.726800   22.983007   29.992034   90.710689   94.015744   79.871680\n [859]  167.763789   79.233411   52.001161 1163.650070   22.689142 1224.084061\n [865]  151.838408   62.175657  526.652630   22.073987  689.647275  728.547891\n [871]   48.127622  772.984000   41.425766 1293.132643   40.127398  736.602315\n [877]   21.324215   21.324216  486.267385   58.078484   34.165313  159.814506\n [883]   28.779593  138.047625   17.867468   60.541528   73.391359   69.844908\n [889]   43.941566   28.466275   42.136208   23.982070   34.954086   34.954086\n [895]  134.455401   16.211884   45.635634   23.429949  183.405547  101.522341\n [901]   60.852819 2208.436545   36.008505  564.592423  307.834921  290.165392\n [907]   59.297018   38.415939  168.047279   74.755180   31.479189  155.769284\n [913]   73.551063   16.130722  103.568325   27.062151 1245.337266   27.577820\n [919]   53.822908   24.428115  145.128131  123.889026   20.489261  104.860144\n [925]   24.119084   48.899722   23.040571  134.001953   35.299581  138.917039\n [931]   28.497842   79.341721   16.646610   33.538010   21.266106  203.811130\n [937]   19.139412  161.210685   29.581326 1746.035056   35.977674   69.819594\n [943]   23.676979   13.686571   91.674033   24.797437   16.018500  587.993166\n [949]   68.780304   60.554910   48.600485   16.857581  390.380682   33.981615\n [955]  312.214617   37.959641   18.957765   43.712637   36.543140  344.994162\n [961]   37.808926   16.748860   43.799985   29.726622   45.505212   98.490511\n [967]   33.063325  274.695725   18.179141   44.938459   22.983026   30.390698\n [973]   33.157116   29.627062  347.213072   54.531007   32.016158  119.929795\n [979]   33.067229   44.267259   27.021164  255.827331   46.838893   19.677503\n [985]  105.547607   22.029310   22.811790  351.705224   16.211900   35.579046\n [991]  343.069233   22.491400   20.489294   60.710513   19.045328  545.191394\n [997]   16.532042   30.147114   13.941147  237.670220   52.478951   14.130862\n[1003]  293.424514   90.051327   39.640205  374.858333   44.453481   28.720426\n[1009]  212.180019   31.745418  601.308184   54.913274   72.024710   13.931661\n[1015]  387.512430   47.926005   31.252817   31.262035   84.323589   61.115609\n[1021]   29.199543  144.216694   67.817353  138.195883   29.603688   19.839635\n[1027]  778.760279   19.765747   58.836356   36.506736   21.256740  830.720158\n[1033]   21.106592   39.583528  555.460912   54.539778   16.950371  127.970943\n[1039]   15.878496   16.330298   91.987657   17.007576   13.220882  731.554098\n[1045] 1139.253484   18.339732   56.170348   37.211538 1281.368577   86.422096\n[1051]   43.428148  421.914275   38.681268   16.485218  226.221942  840.441059\n[1057]   13.925780   14.673495   21.216791   19.882808   27.008522   67.719491\n[1063]   41.191832 1681.659524   26.758308 1257.084855  782.060294   23.433254\n[1069]   13.423688  543.416071   26.524526   31.200609   14.613977   33.754487\n[1075]  973.168756   30.271489   35.636165  874.469939   52.253907   38.267839\n[1081]  507.327224   41.549875   21.725433 1005.693789   16.536990 1547.286088\n[1087]   50.879393   28.342550 1464.914951   21.324225   62.850772   18.836992\n[1093]  960.702886   46.281924   20.754499   67.877227   45.195765 1111.970823\n[1099] 1694.047356   59.496055   32.740038 1961.064075  411.618948   29.240851\n[1105]  317.600564   22.766267  139.353899   30.250600   52.913969  686.291750\n[1111]   34.180472   55.451033   16.557017  327.868980   39.993475   48.635673\n[1117]   69.432633   21.672582  252.299367   18.549998   81.654996   58.770958\n[1123]   22.884099  790.894294   15.712709  676.593864   17.331093  572.264211\n[1129]   64.431849  457.115026  816.666539   24.282945 1120.633199  639.341198\n[1135]  781.461322    5.893569   98.882370   11.378085  106.300428    7.844025\n[1141]  360.205329   13.923746   34.910615   24.444603   46.354139   13.616470\n[1147]  689.495871   13.247828   38.435724   16.207918   25.622976   90.826538\n[1153]   25.122736   55.057430   19.317634   89.298157  139.692126 2069.506104\n[1159]   48.674822   85.491960   50.130336  640.716070  745.898463  775.776412\n[1165] 1410.290690  455.150105  130.238129   73.659821  721.032495  371.608853\n[1171]  545.912778  312.934657  420.872179  311.408100  132.958672  145.236058\n[1177]    8.466923  357.330741   38.569330   39.283698   32.780525    7.226776\n[1183]  318.971467  151.517095  155.778867    7.809627  136.347726  267.066021\n[1189]  261.000372   44.956899    6.716037   41.349654   49.560681    8.779762\n[1195]    9.002127  655.157340  229.883185  653.159601  637.161062 3421.970505\n[1201]   38.206663   28.035345   17.142870   32.556036   55.833523   19.818322\n[1207]   23.391592   13.866753  212.305138  254.229563   30.069480  140.358499\n[1213] 1553.152291  884.339363  406.430085 1736.219968  449.094784 3393.752970\n[1219] 3454.678767  706.909633  165.462445 1286.348829  442.804071  719.637252\n[1225]   32.175105  616.160080  318.775488  315.325367  704.418180  345.982448\n[1231]  358.610682   65.454993   95.388118   17.406819 1399.497835 2176.524343\n[1237]  142.822240   89.075818   48.819213   13.981608   12.390607    8.908977\n[1243]   13.090455   20.429266  375.478135   99.661463 2484.810674   53.780903\n[1249] 1397.460568   43.967410  189.347301  264.777122   14.678048   18.556989\n[1255]  104.618429   25.851614   40.060136  213.774341   99.036800   53.667627\n[1261]   66.092957   36.233823   66.911245  236.245918  218.269745   23.701237\n[1267]   35.542737   60.919454   69.474079   37.312029  635.332701  374.937158\n[1273]  129.797355  211.720835   97.559662  175.469137   22.678775   25.711902\n[1279]   50.337113   43.553489   22.182571   17.492050   33.300245   32.712735\n[1285]   30.888872   16.125524   89.593661   10.171484   47.962358  155.845600\n[1291]   86.350012   54.777840   20.083833   41.737195   24.346010   18.182760\n[1297]  756.201245   15.900757   36.154865  530.093070    7.809647  199.499737\n[1303]  302.711081   96.975252  173.852182  150.178514   34.666523  153.318325\n[1309]    7.048389   13.754704  143.481956   12.517733  137.839867   98.901419\n[1315]  258.706654 1183.701364   61.956866   69.947292   28.685367  157.491478\n[1321]   30.047188  163.409160  139.890103   27.851324   45.635547   22.792459\n[1327]   49.002210   46.394828  184.195675   70.290068   14.112534   20.892144\n[1333]   12.777696 1111.136129 1562.872830   30.413220  251.188596  144.814096\n[1339]   52.498749   94.645307  153.722359  121.791132   43.901041  164.110992\n[1345]   20.993668   25.046186   76.162092   40.028124   67.979240 1493.699646\n[1351]   56.461175  101.311257   50.365124   91.154924   44.744919   24.061236\n[1357]   70.282269   28.992810   73.623607   25.343086   49.479220   23.403412\n[1363]   25.099524   43.441545   44.083468  109.063254   33.846595   20.474119\n[1369]   26.054776   74.594710  405.245231   39.827512   20.792872   25.462629\n[1375]   28.411662   30.844410  142.839701   25.512430   39.872043   44.211170\n[1381]   43.154974   80.749892   42.213679  275.427524  102.496570  858.191755\n[1387]   42.476711  917.494977 1195.438692 2358.342378   21.218368  127.974867\n[1393] 1947.651448   10.474971  693.784563   22.219934  122.217224   63.836595\n[1399]   97.713235    8.478698  209.995448   29.103109  132.600092   18.179123\n[1405]   44.305277   22.540906  225.848824   18.058900 1274.874742    4.464499\n[1411]  570.884928   15.915948 2147.001225   16.886364   13.213405   15.848658\n[1417]   69.111532   15.675804   72.047857   15.165723   77.792181   11.637284\n[1423]   13.921840  169.775606   50.394486   23.968530   30.728551   11.369325\n[1429]  155.191303   82.800925   36.201812   29.885997   64.200946   23.664517\n[1435]  211.496845   75.286010   15.992024   13.436837    2.993855 1293.074331\n[1441]  106.368527  262.158606   31.439830  100.730327   40.084158  136.327214\n[1447]   35.179233  103.863518   39.461546 1607.033506   32.614672 1656.601436\n[1453]  540.973041   18.057425 1929.815125 2939.948922   52.370190   77.979945\n[1459]   14.154385    7.102520    6.349448   79.048522   47.523456   29.798480\n[1465]   92.080011   14.116409   23.494952   38.097159   30.379387   33.377608\n[1471] 1605.442024   13.637251   12.779229  374.346855   18.720864   14.384205\n[1477]   38.438818    9.334895   47.631909   33.757063   67.029592   53.653061\n[1483]   17.345597   30.982686  635.044064  329.471792   59.316889   79.811874\n[1489]   18.498662   99.479445   67.189692   13.056481   77.293294   66.868195\n[1495]   60.133183   49.434124   10.959722   22.005658   58.999119   59.943057\n[1501]  587.048296 1442.278311   42.575014   59.845369   54.226497   19.166538\n[1507]   38.003696 2835.439417  146.628741   27.006378   41.647786    9.938043\n[1513]   32.050916   14.753662  346.201880  297.866816  319.421756   10.737832\n[1519]   12.439658   11.128638   85.109346    5.111170  158.339691   16.429591\n[1525]   21.894190   24.935315   13.393490 2482.688854   48.610973 1037.811823\n[1531]  369.578999  251.431914  160.194061  229.339654  134.671386   39.244647\n[1537]  215.375087  168.022890 1538.691647  284.615482  334.914290  858.509102\n[1543]  425.460693  247.414596 1629.873466  124.612766  382.489901  145.021785\n[1549]  136.121044 1391.651787  697.850608 1685.492882 1330.307083  202.756358\n[1555]  318.131018  191.646114 1222.220250  239.383310 2625.086830  115.504220\n[1561]  110.809299 3611.903962  152.907620  110.588972  233.734133  108.265560\n[1567]  231.261537   11.563417   15.944720  536.318125   41.866922  160.437647\n[1573]  108.411241   18.436958   15.929284  123.620961   20.153196  112.296449\n[1579]   62.518527  107.172637  252.403649   44.073948   36.986946    8.012251\n[1585]  252.187591   13.370263    5.868668    8.044576    6.957169   41.878614\n[1591]   43.820470   18.487165   76.362544   63.745430   63.173153  266.027504\n[1597]   26.564286   22.261619   29.455016   81.668970    8.001274   17.219915\n[1603] 2487.960906   67.448128   49.808723  192.581661 2392.225773  190.997308\n[1609]   87.220279   32.846653   34.653707   13.109184   12.208165   37.471592\n[1615]   34.845676   13.472761  206.612618  183.666715  507.890393  124.271019\n[1621]   30.112677  128.340393  476.462835  781.323311   12.223901  296.070883\n[1627]  823.143355   23.610055   55.272632   79.296129 1568.936637   52.344593\n[1633]   44.321780   53.071943 1511.351540   37.600036   14.182575 1488.249668\n[1639] 2024.210688  105.325601   69.111441  121.879880  122.098295 1034.309722\n[1645] 1164.348087   66.587440 2968.085731   81.053739  289.455207  116.657383\n[1651]  100.463659   28.464383   14.194722  203.673748  129.089197  100.436735\n[1657]   83.488134   51.348180  296.376673   32.569152   55.087205   30.583408\n[1663]   31.573235   41.087657   50.628000   40.820839  278.848680   72.878968\n[1669]   77.498415   58.053285   55.116991   19.317537  371.566159  226.007348\n[1675]   64.907467   52.626277  174.565702   18.929061   76.832001   44.611726\n[1681]   29.197206  131.888935   57.708319   40.661912   13.365771    7.103529\n[1687]   82.396024  391.092668   74.929219   32.517169  149.305741   83.372288\n[1693]   66.578126   84.131855 1050.222732   49.139734   86.292622  146.697666\n[1699]  465.023239  171.723467  559.611118  158.772760 2461.483315  139.406687\n[1705]  518.526571   18.438028  492.501758  206.733333   14.899137  117.108132\n[1711]  108.589197  622.534446  147.486078  119.675005  103.547229   89.028210\n[1717]  106.342956  129.563821   33.719787  443.751021   65.891652  106.071227\n[1723]  219.465284   46.773653  279.240089   55.429865   47.961556   41.607142\n[1729]  103.500666   74.140276   51.780404  153.662558   69.604906  111.203780\n[1735]  359.407613   57.744823   58.448893   57.073945   16.018453   84.132407\n[1741]    5.559246  137.774335   44.481570   44.107653  257.069128  132.976529\n[1747]  124.084242   51.500191   66.899949 2425.635466   21.075473   75.322687\n[1753]   55.974243   67.232795   38.984413  114.893287   63.014917   64.409317\n[1759]   75.345023  345.299405   23.058532   14.348946   33.845760   10.586683\n[1765]    9.802010   21.563717   22.695189   50.443219  330.119927   28.935954\n[1771]   18.324271  146.321209  275.489801  206.178770  415.915009   13.180440\n[1777]   22.165025    9.552693   73.760411  198.552874  290.171589  226.592737\n[1783]  119.930944  291.446878  222.983831   26.981396  285.585606  283.798165\n[1789] 1416.220717   76.736249   33.077492   14.124086  933.888006 1030.970285\n[1795]   50.009243   37.853643 1489.126153  280.986664  689.861551  493.835832\n[1801]  192.034193  798.503943   13.352903   27.966758   31.958042 2013.627521\n[1807]   43.758231   72.422100   40.460766  133.864763   14.509441 1540.157253\n[1813]   29.821518  369.849436  365.285611   43.224556   22.610094   17.220231\n[1819]   29.372260   17.220231 1311.620392   77.422767   24.132250   71.406597\n[1825] 1094.596230   49.986324  902.779095 2063.245318   39.592334   46.223978\n[1831]   63.907620   75.207208   49.340130   31.482344   18.534991  117.023955\n[1837]  116.195886 2130.438399  573.257078  113.721937 1057.859025  141.584665\n[1843]  141.142913  141.934207 2800.538214   20.950938 1916.386934   18.095001\n[1849]   26.243117   43.349517  294.116733   38.084387   35.757376   33.807366\n[1855]   29.131830   33.723087  155.847584   31.869162   22.854050   85.918410\n[1861]   51.638320  206.755004   52.385605   38.400173   13.875497   10.013784\n[1867]   13.924269   91.733749   23.831845  185.064819   32.114136  178.013311\n[1873]   25.882808   73.957892   37.484437   22.941988 2076.861581   38.289413\n[1879]   33.216244   32.026055  117.620069   62.217265   29.583341   10.078226\n[1885]   17.749790   27.854547   19.925237  144.891731   10.647097  625.407831\n[1891]   36.809116   16.371624   31.830673   17.821918   23.874743  111.130444\n[1897]   29.252945    9.657779   10.680519  206.515845   23.145724   22.127542\n[1903]   14.388471   13.995781   76.774880   41.102549   34.959925   15.719729\n[1909]   16.723780   24.277341    4.706418    9.974221 1563.959558  215.163805\n[1915]   33.146314   16.196709   22.924589   12.414274   48.723132   40.456854\n[1921]   12.291337 2076.451856   22.935570  157.956043   24.547977   75.629671\n[1927]   38.492624   54.134483   23.073198   48.834448  131.254526   10.360836\n[1933]    7.638713    7.702372   14.516024  109.890054   19.549608   35.494312\n[1939]   23.260179  104.420762   12.443051    6.628755    8.292896  608.447747\n[1945]   31.581715  823.557695 1874.718293   18.629587  252.345729  356.371355\n[1951]  100.581599  140.563627   45.845361  122.598167  147.526420   55.758015\n[1957]   33.545128  128.036202  105.671679  115.279197   17.805814   56.429983\n[1963]   25.012598  899.057427  930.113001   16.829012    6.800752    6.989897\n[1969]   72.558681   59.884290   26.735443   39.056657   24.721908   94.976929\n[1975]   15.719888   47.204750   29.645565 1356.437360    8.747364  116.188080\n[1981]   20.062062  168.257427   40.587483   36.824365  151.682229   26.943909\n[1987]   91.105510   27.333010  139.294821   65.460081  291.967707   34.854216\n[1993]   71.572777   40.686402  114.592228   18.253361  843.530057   65.185838\n[1999]  335.096456   74.499307  124.123977   59.094685   72.894429   35.853713\n[2005]  106.185196   65.702358   70.799340  352.855540   60.907585  310.237394\n[2011]   39.265797   27.924812  164.793135  117.653920  722.688006   82.487324\n[2017]   29.648601   18.836402   58.040634   55.115004  392.318293  633.899292\n[2023]   44.128277   75.116215   72.068690   32.707451   41.302946  342.399232\n[2029]  188.175727  801.440587   36.147342   69.075177   39.972048    5.720204\n[2035]   14.191518 2515.044298   44.003022   26.337943 2337.795146  113.234705\n[2041]  164.884441   25.975205   13.878850 2181.964717   93.964493   63.972767\n[2047]   37.387050   24.445160  247.178437   17.901765  205.815568   68.537111\n[2053]   17.519995   37.037073   36.982363   21.165873  179.529099   64.548159\n[2059] 1144.393274   17.368191   16.272974   52.968248   48.635608  262.179454\n[2065]   17.843918  904.923956  116.903402   53.293435   66.580306   17.401633\n[2071]   13.315592   13.853977  522.707484   19.839630   16.920344  109.723874\n[2077]  134.703196  559.527027   29.113336   86.769751  218.956148  115.223874\n[2083] 1048.445051  160.908644  391.908610   98.622355   56.956080   65.188953\n[2089]   42.534155  295.121072   16.754548  545.679263   23.568427  205.157602\n[2095]  106.129309   61.458507  132.755123   12.988234  429.462929   19.399891\n[2101]   40.959266   16.881392   87.553727   32.710506   52.389417   46.031348\n[2107]   14.755532   20.470098   58.647015   88.431985   56.697252  840.439283\n[2113]   26.208511   10.737495   10.688249   15.299035   10.688249  107.260125\n[2119]   92.510583  105.591277   17.692002    6.676438   11.185971   31.667418\n[2125]   39.962422   45.113878 1943.728956   38.106705   29.123271   26.407011\n[2131] 2361.481681   45.125156   15.064281   11.953043   18.928808   40.821361\n[2137]   94.132133  112.693892   64.583898   17.855379   25.803949  591.276470\n[2143]   37.095645  186.927188   22.195535   60.876619 1180.845923   19.517077\n[2149]   10.257037    7.878147   13.427894    8.128454    9.077909 1027.092621\n[2155]   26.755143   71.877185   24.298973   38.127993   18.917231   62.172128\n[2161]   28.827007 1225.353015   35.580590   18.957200   30.804225    6.961886\n[2167]  489.123036   23.320933   28.767009   16.309510   43.391942   21.346229\n[2173]   55.634692   21.627769 1023.338884   20.731515  348.321319  103.676681\n[2179]   67.009053  241.529044   20.667662  300.060250   19.075120  400.001405\n[2185]   20.434550  134.362864   53.794653   66.699219   61.042163   34.489065\n[2191]   73.284334   55.118784    8.994242   22.505303   33.412179   24.074645\n[2197]  242.786848  148.018545   76.619596  181.593750   49.595960   68.532283\n[2203]   52.104567   65.755523   22.467201   27.208068    8.596001   18.964249\n[2209]   57.345041   95.081918   40.366085  192.620336    9.002127    5.128515\n[2215]   16.900365   31.834713   45.698292   47.106309   23.794075  134.697437\n[2221]   70.428005  214.578312   18.130026  137.776791   67.350051  261.002784\n[2227]   20.908778  124.193998   52.629617   35.199003  352.112178  154.990066\n[2233]   84.777270  264.120163   21.738766   55.863223   18.283236   44.925076\n[2239]   19.532596  558.809681   19.622457   32.211235   23.467944   61.132835\n[2245]   18.279892 1140.491563   18.550037   59.462815   33.815110   11.250475\n[2251]   20.064246   12.661403   22.042338 2535.791353   50.228191   50.106330\n[2257] 1175.157767   63.663702   82.401092   80.366545 1421.851219   49.113540\n[2263]   35.769608  290.619681   73.386061  778.261208  113.762083 2585.410459\n[2269]   90.643032   85.141290   89.420026 1918.942056   76.558039 1256.120462\n[2275]  215.132661 2767.546509   58.530657  215.946753   46.898474   87.202244\n[2281]   46.548592  162.788330   44.988112  890.499936   92.665391   61.893647\n[2287]  538.573944   33.114085  175.325808   67.439705   33.546037  252.755298\n[2293] 1146.889941   22.136050   48.479980   45.768846   51.949394   52.321031\n[2299]   35.765849   76.194163   33.545991   11.749194   18.560587 1927.264056\n[2305]   81.698324  158.691853   80.442931  493.048194  122.692240  106.062111\n[2311]   13.525995   15.275786  463.928714  373.651300  136.681950   52.275558\n[2317]  354.716865   50.592825  135.410425   78.173173   86.975177  211.083146\n[2323]   54.908028   59.312850  374.721149  280.217697  161.050492  104.287869\n[2329]   66.480353   51.606918  426.185823   99.095432   39.764084   42.438712\n[2335]  479.777643  118.357938   64.504677   63.501729   55.322439  577.082857\n[2341]   79.291176   42.835996   46.692252  146.117802   66.648348 1169.875744\n[2347]   80.105324   95.850973    8.747364   21.485864  107.312506   78.560187\n[2353]   68.250977   25.991091   16.654614   10.686841   32.557572   11.279284\n[2359]   10.686842    7.059620   36.071992   42.147861   10.054310   12.275230\n[2365]   13.424252 1283.752454   16.011126   57.167390  226.250520   42.530838\n[2371]   82.429311   63.178508  117.654523  228.038026   27.334634  546.398904\n[2377]   13.529472   22.291761   15.275786  205.001878  140.048818   75.253214\n[2383]   67.447203    8.959061   17.747229   17.447086   18.277969 1497.301076\n[2389]   48.978612   42.630929   10.479923  114.919827   33.776126   86.655262\n[2395]   18.674205   21.389981   21.135665  114.811631   20.949720   34.677993\n[2401]   19.997118 1631.136926   41.229102 1433.964263   22.936161  112.591821\n[2407]   30.202932   47.027347  108.812156   15.645380    6.686281   11.410830\n[2413]   25.870836  989.377050   36.811814   71.892772   17.875644  178.103734\n[2419]   41.099943   31.199196   62.386929   30.700442   66.353296 1353.068914\n[2425]   60.416216   59.904914   87.866446 1717.309428   45.709656   49.668032\n[2431]   11.975386   67.541025  509.789756  249.406981   44.826667   88.725592\n[2437] 1095.116596   10.956587  197.835934   37.899171 1134.411638   46.859904\n[2443]   51.473591   89.341932  118.381944    7.121823   20.790096   12.638137\n[2449]   11.187972    8.776026    9.135058   65.299898   17.745184   58.987753\n[2455]   70.119681   56.252944   52.895129 2443.650536   41.612193   18.625173\n[2461]   20.771315   18.075746   12.754299   23.263497   11.902065  191.775279\n[2467]   29.069302   22.864451   45.428953   32.871296   26.682885   20.791841\n[2473]   16.646225  163.545206   28.447550   13.402135    3.317251    7.633754\n[2479]    8.044005    9.121909   15.220589 1938.384267   10.586698   11.978830\n[2485]   55.075615   18.654242   36.890308   28.244417   48.625694   48.308073\n[2491]   54.691907   58.494820   60.566920   35.990003   13.300785   21.677209\n[2497]   61.609891   17.107875  215.179231  139.984726   30.161354 1907.157162\n[2503]   50.364853  102.773238   46.654355   57.594231   91.324879   91.802389\n[2509]   39.942082   41.486604   29.936559   25.379201  171.750232   10.848698\n[2515]   31.224261  151.406599   57.586021   25.327101 1840.377382 1794.605008\n[2521] 1992.204520   32.591168  676.121201   41.031295   20.714191   33.817041\n[2527] 1038.447831  272.185618 1108.993374   70.993542   14.976006   20.208055\n[2533] 1262.405392   30.342667 1174.325692   39.397161  658.762399  804.449517\n[2539]   62.858846   16.642611   14.224934 1288.446540   42.731844   68.203428\n[2545]   68.211263   67.388238 1262.677044   45.344274  539.298546   75.938510\n[2551]   36.584472  946.490654   74.860133   53.043557  998.769314  708.027547\n[2557]  664.656568 1522.937844   37.620548   38.475678  114.218347  140.490695\n[2563]  100.842923  150.822631  106.908600 2215.358463   12.681999  131.738791\n[2569]   54.015796  177.129548   54.851636 1286.505978   14.415392  798.479886\n[2575]   55.816562 1475.120900   13.760216   11.529257   30.274175   17.158034\n[2581]   20.590262   38.356896   28.604428  477.996013   20.621418   42.311230\n[2587]  152.257897 1394.144759   49.341766   20.534061  103.913150  103.366275\n[2593]   37.204661   51.085553 1469.962638  131.281838  390.169708   33.576767\n[2599]   83.900007   26.931651   98.711809   35.757438   28.246004   40.820426\n[2605] 1168.077256   21.602158   32.118495   33.707057 1215.484284   43.308992\n[2611]   65.600983   48.785557   41.308589 1756.614856   38.373664 1323.731489\n[2617]  345.731047   44.511122  589.006233   53.476989 1365.920446   30.379602\n[2623] 1181.965263   37.642937  734.500190   42.027990  207.706024  115.517689\n[2629] 1461.068719   32.679218 1571.596259   50.985852   55.758701   18.929059\n[2635]   41.500026 3220.786972   71.802235   18.146537   18.496285 2997.774933\n[2641]   35.379079\n\n\n\n# Recreate the sf object with the correct CRS and geometry\nsamples_clean &lt;- st_as_sf(samples, coords = c(\"x\", \"y\"), crs = st_crs(network))\n\n\ndensities &lt;- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples_clean,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\",\n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = NULL, \n                  sparse = TRUE,\n                  verbose = FALSE\n                  )\n\nplot(densities)\n\n\n\n\n\n\n\n\n\nsamples_clean$density &lt;- densities\nlixels$density &lt;- densities\n\n\n# rescaling to help the mapping\nsamples$density &lt;- samples_clean$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nNetwork Constrained G- and K-Function Analysis\n\nkfun_childcare &lt;- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n\n\nkfun_childcare$plotk"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "In this hands-on exercise, we will compute and visualize spatial weights in R using geospatial data. We will focus on contiguity-based (Queen and Rook) and distance-based spatial weights matrices.\n\n\nWe will use the following R packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\n\n```{}}\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhunan &lt;- left_join(hunan, hunan2012)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\n\n\n\n\nwm_q &lt;- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\n\nwm_r &lt;- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\n\n\n# Extract centroids of polygons\ncoords &lt;- st_coordinates(st_centroid(hunan))\n\nWarning: st_centroid assumes attributes are constant over geometries\n\n# Plot the base map\nplot(st_geometry(hunan), border = \"lightgrey\")\n\n# Plot the spatial weights with the correct coordinates\nplot(wm_q, coords, pch = 19, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nsummary(wm_d62)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#prerequisites",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#prerequisites",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "We will use the following R packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-the-data",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "```{}}\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhunan &lt;- left_join(hunan, hunan2012)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#compute-contiguity-based-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#compute-contiguity-based-spatial-weights",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "wm_q &lt;- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\n\nwm_r &lt;- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-spatial-weights",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "# Extract centroids of polygons\ncoords &lt;- st_coordinates(st_centroid(hunan))\n\nWarning: st_centroid assumes attributes are constant over geometries\n\n# Plot the base map\nplot(st_geometry(hunan), border = \"lightgrey\")\n\n# Plot the spatial weights with the correct coordinates\nplot(wm_q, coords, pch = 19, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#compute-distance-based-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#compute-distance-based-weights",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "wm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nsummary(wm_d62)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Installing and Loading the R packages\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n\nSpatial Data Wrangling\nImporting the spatial data\n\nchildcare_sf &lt;- st_read(\"geospatial/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex02/geospatial/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf &lt;- st_read(dsn = \"geospatial/\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex02/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 67 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6091 ymin: 1.16639 xmax: 104.0858 ymax: 1.471388\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"geospatial/\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex02/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nMapping the geospatial data sets\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data wrangling\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 1 \nextent      : 103.6091, 104.0858, 1.16639, 1.471388  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 67\nnames       : ID_0, ISO, NAME_ENGLI,  NAME_ISO,  NAME_FAO, NAME_LOCAL, NAME_OBSOL, NAME_VARIA, NAME_NONLA, NAME_FRENC, NAME_SPANI,                 NAME_RUSSI,                      NAME_ARABI,               NAME_CHINE, WASPARTOF, ... \nvalue       :  205, SGP,  Singapore, SINGAPORE, Singapore,  Singapore,         NA,         NA,         NA,  Singapour,   Singapur, Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ, Ø³ÙØºØ§ÙÙØ±Ø©, æ°å å¡,        NA, ... \n\n\nConverting the Spatial* class into generic sp format\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 1 \nextent      : 103.6091, 104.0858, 1.16639, 1.471388  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \n\n\nConverting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nchildcare_ppp\n\nMarked planar point pattern: 1925 points\nmarks are of storage type  'character'\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1925 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nHandling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1814] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1888] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1925] 1\n\n\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n# Transform the CRS to SVY21 (EPSG:3414)\nsg_sf_projected &lt;- st_transform(sg_sf, 3414)\n\n# Check if the CRS transformation was successful\nst_crs(sg_sf_projected)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nCreating owin object\n\nsg_owin &lt;- as.owin(sg_sf_projected)\n\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n34 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1       4033 604202000.0      8.67e-01\npolygon 2         38    414592.0      5.95e-04\npolygon 3         16     19671.9      2.82e-05\npolygon 4        537  24890800.0      3.57e-02\npolygon 5        106   1949160.0      2.80e-03\npolygon 6        261  10256000.0      1.47e-02\npolygon 7         36     38729.5      5.56e-05\npolygon 8         76   1087280.0      1.56e-03\npolygon 9         62    920917.0      1.32e-03\npolygon 10        96    573783.0      8.23e-04\npolygon 11        34    126330.0      1.81e-04\npolygon 12        13     20190.5      2.90e-05\npolygon 13        18     34466.7      4.94e-05\npolygon 14        37    239043.0      3.43e-04\npolygon 15       320   4789260.0      6.87e-03\npolygon 16       473  26400400.0      3.79e-02\npolygon 17        21     47547.0      6.82e-05\npolygon 18        77   1430070.0      2.05e-03\npolygon 19       192   4796520.0      6.88e-03\npolygon 20       132   2985250.0      4.28e-03\npolygon 21        75    955310.0      1.37e-03\npolygon 22        19     63805.9      9.15e-05\npolygon 23       105    832107.0      1.19e-03\npolygon 24        21     35903.4      5.15e-05\npolygon 25        43    139236.0      2.00e-04\npolygon 26        23     71722.4      1.03e-04\npolygon 27        70    483000.0      6.93e-04\npolygon 28       207   3885250.0      5.57e-03\npolygon 29        16     35110.5      5.04e-05\npolygon 30        26     72188.5      1.04e-04\npolygon 31       156   2364690.0      3.39e-03\npolygon 32        67    732165.0      1.05e-03\npolygon 33       104   1100540.0      1.58e-03\npolygon 34        82   1034550.0      1.48e-03\nenclosing rectangle: [3040.59, 56097.76] x [16599.19, 50324.13] units\n                     (53060 x 33720 units)\nWindow area = 697027000 square units\nFraction of frame area: 0.39\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1924 points\nAverage intensity 2.760294e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1924 character character \n\nWindow: polygonal boundary\n34 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1       4033 604202000.0      8.67e-01\npolygon 2         38    414592.0      5.95e-04\npolygon 3         16     19671.9      2.82e-05\npolygon 4        537  24890800.0      3.57e-02\npolygon 5        106   1949160.0      2.80e-03\npolygon 6        261  10256000.0      1.47e-02\npolygon 7         36     38729.5      5.56e-05\npolygon 8         76   1087280.0      1.56e-03\npolygon 9         62    920917.0      1.32e-03\npolygon 10        96    573783.0      8.23e-04\npolygon 11        34    126330.0      1.81e-04\npolygon 12        13     20190.5      2.90e-05\npolygon 13        18     34466.7      4.94e-05\npolygon 14        37    239043.0      3.43e-04\npolygon 15       320   4789260.0      6.87e-03\npolygon 16       473  26400400.0      3.79e-02\npolygon 17        21     47547.0      6.82e-05\npolygon 18        77   1430070.0      2.05e-03\npolygon 19       192   4796520.0      6.88e-03\npolygon 20       132   2985250.0      4.28e-03\npolygon 21        75    955310.0      1.37e-03\npolygon 22        19     63805.9      9.15e-05\npolygon 23       105    832107.0      1.19e-03\npolygon 24        21     35903.4      5.15e-05\npolygon 25        43    139236.0      2.00e-04\npolygon 26        23     71722.4      1.03e-04\npolygon 27        70    483000.0      6.93e-04\npolygon 28       207   3885250.0      5.57e-03\npolygon 29        16     35110.5      5.04e-05\npolygon 30        26     72188.5      1.04e-04\npolygon 31       156   2364690.0      3.39e-03\npolygon 32        67    732165.0      1.05e-03\npolygon 33       104   1100540.0      1.58e-03\npolygon 34        82   1034550.0      1.48e-03\nenclosing rectangle: [3040.59, 56097.76] x [16599.19, 50324.13] units\n                     (53060 x 33720 units)\nWindow area = 697027000 square units\nFraction of frame area: 0.39\n\n\nFirst-order Spatial Point Patterns Analysis\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n305.2404 \n\n\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nWorking with different automatic badwidth methods\n\nbw.CvL(childcareSG_ppp.km)\n\n  sigma \n4.53932 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.160434 1.395302 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n   sigma \n0.389485 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.3052404 \n\n\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nWorking with different kernel methods\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\nFixed and Adaptive KDE\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n# Load the required libraries\nlibrary(spatstat.geom)  \nlibrary(sp)         \n\n# Step 1: Extract pixel values (z) and grid coordinates (x, y)\nx_coords &lt;- kde_childcareSG.bw$xcol   # x coordinates of the grid\ny_coords &lt;- kde_childcareSG.bw$yrow   # y coordinates of the grid\nz_values &lt;- t(kde_childcareSG.bw$v)   # Pixel values (transposed to match coordinate orientation)\n\n# Step 2: Create a grid of the coordinates\ngrid &lt;- expand.grid(x = x_coords, y = y_coords)\n\n# Step 3: Create a SpatialPixelsDataFrame (used for gridded data)\nsp_grid &lt;- SpatialPixelsDataFrame(points = grid, \n                                  data = data.frame(value = as.vector(z_values)),\n                                  proj4string = CRS(\"+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs\"))\n\n# Step 4: Convert to SpatialGridDataFrame\nsp_grid_df &lt;- as(sp_grid, \"SpatialGridDataFrame\")\n\n# Check the structure\nsummary(sp_grid_df)\n\nObject of class SpatialGridDataFrame\nCoordinates:\n        min      max\nx  3.040593 56.09776\ny 16.599186 50.32413\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs]\nGrid attributes:\n  cellcentre.offset  cellsize cells.dim\nx          3.247848 0.4145091       128\ny         16.730924 0.2634761       128\nData attributes:\n     value       \n Min.   : 0.000  \n 1st Qu.: 0.000  \n Median : 0.109  \n Mean   : 2.767  \n 3rd Qu.: 4.598  \n Max.   :35.129  \n NA's   :9998    \n\n\n\n#gridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\n#spplot(gridded_kde_childcareSG_bw)\n\n\n# Load the raster package\nlibrary(raster)\n\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4145091, 0.2634761  (x, y)\nextent     : 3.040593, 56.09776, 16.59919, 50.32413  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -7.060279e-15, 35.12852  (min, max)\n\n\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4145091, 0.2634761  (x, y)\nextent     : 3.040593, 56.09776, 16.59919, 50.32413  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -7.060279e-15, 35.12852  (min, max)\n\n\nVisualising the output in tmap\n\n# Load the tmap package\nlibrary(tmap)\n\ntmap_mode(\"plot\")  # For interactive maps\n\ntmap mode set to plotting\n\n\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nComparing Spatial Point Patterns using KDE\n\n# Load the dplyr package\nlibrary(dplyr)\n\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n# Load the spatstat.geom package\nlibrary(spatstat.geom)\n\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\n# Load the spatstat package\nlibrary(spatstat)\n\n\nchildcare_pg_ppp.km &lt;- rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km &lt;- rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km &lt;- rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km &lt;- rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\n# Calculate bandwidths using bw.ppl()\nbw_pg &lt;- bw.ppl(childcare_pg_ppp.km)\nbw_tm &lt;- bw.ppl(childcare_tm_ppp.km)\nbw_ck &lt;- bw.ppl(childcare_ck_ppp.km)\nbw_jw &lt;- bw.ppl(childcare_jw_ppp.km)\n\n# Perform kernel density estimation with the calculated bandwidth\nkde_pg &lt;- density(childcare_pg_ppp.km, sigma = bw_pg, edge = TRUE, kernel = \"gaussian\")\nkde_tm &lt;- density(childcare_tm_ppp.km, sigma = bw_tm, edge = TRUE, kernel = \"gaussian\")\nkde_ck &lt;- density(childcare_ck_ppp.km, sigma = bw_ck, edge = TRUE, kernel = \"gaussian\")\nkde_jw &lt;- density(childcare_jw_ppp.km, sigma = bw_jw, edge = TRUE, kernel = \"gaussian\")\n\n\n# Plot the kernel density estimates\npar(mfrow = c(2, 2))\nplot(kde_pg, main = \"Punggol\")\nplot(kde_tm, main = \"Tampines\")\nplot(kde_ck, main = \"Choa Chu Kang\")\nplot(kde_jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n\n\n\n\n\n\n\n\nNearest Neighbour Analysis\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.52559, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.88369, p-value = 0.05562\nalternative hypothesis: two-sided\n\n\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.67712, p-value = 2.367e-11\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Getting Started\nInstall and launching R packages\n\npacman::p_load(sf, tidyverse, tmap)\n\nImporting Geospatial Data\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nChecking the Content of A Simple Feature Data Frame\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nPlotting the Geospatial Data\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nWorking with Projection\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTransforming the projection of preschool from wgs84 to svy21\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\nImporting the aspatial data\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (38): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (6): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,540 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Ensu… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2024-06-29   city … B&B … &lt;NA&gt;       \n 3  71903 https://www.airbnb.co…   2.02e13 2024-06-29   city … Room… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2024-06-29   city … 10mi… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2024-06-29   city … 15 m… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2024-06-29   previ… Book… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2024-06-29   city … 5 mi… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2024-06-29   city … Comf… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2024-06-29   city … Rela… **IMPORTAN…\n10 344803 https://www.airbnb.co…   2.02e13 2024-06-29   city … Budg… Direct bus…\n# ℹ 3,530 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nGeoprocessing with sf package\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nPoint-in-polygon count\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nExploratory Data Analysis (EDA)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nImporting Attribute Data into R\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Preparation\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\nChoropleth Mapping Geospatial Data Using tmap\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nData classification methods of tmap\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\nColour Scheme\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nMap Layouts\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nDrawing Small Multiple Choropleth Maps\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_class_Ex02.html",
    "href": "In_class_Ex/In_class_Ex02/In_class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "Spatial Point Patterns Analysis: spatstat methods\nIssue 1: Installing sf\n\ninstall.packages(\"sf\", \n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nIssue 2: Creating coastal outline\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(magrittr)\nlibrary(sf)\n\nWarning: package 'sf' was built under R version 4.2.3\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(spatstat)\n\nLoading required package: spatstat.data\n\n\nLoading required package: spatstat.univar\n\n\nspatstat.univar 3.0-1\n\n\nLoading required package: spatstat.geom\n\n\nspatstat.geom 3.3-3\n\n\nLoading required package: spatstat.random\n\n\nspatstat.random 3.3-2\n\n\nLoading required package: spatstat.explore\n\n\nLoading required package: nlme\n\n\n\nAttaching package: 'nlme'\n\n\nThe following object is masked from 'package:dplyr':\n\n    collapse\n\n\nspatstat.explore 3.3-2\n\n\nLoading required package: spatstat.model\n\n\nLoading required package: rpart\n\n\nspatstat.model 3.3-1\n\n\nLoading required package: spatstat.linnet\n\n\nspatstat.linnet 3.2-2\n\n\n\nspatstat 3.1-1 \nFor an introduction to spatstat, type 'beginner' \n\nmpsz_sf &lt;- st_read(dsn = \"geospatial/\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex02/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()\n\nCreating ppp objects from sf data.frame\n\nchildcare_sf &lt;- st_read(\"geospatial/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex02/geospatial/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nplot(childcare_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1925 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nCreating owin object from sf data.frame\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n80 separate polygons (35 holes)\n                  vertices         area relative.area\npolygon 1            14650  6.97996e+08      8.93e-01\npolygon 2 (hole)         3 -2.21090e+00     -2.83e-09\npolygon 3              285  1.61128e+06      2.06e-03\npolygon 4 (hole)         3 -2.05920e-03     -2.63e-12\npolygon 5 (hole)         3 -8.83647e-03     -1.13e-11\npolygon 6              668  5.40368e+07      6.91e-02\npolygon 7               44  2.26577e+03      2.90e-06\npolygon 8               27  1.50315e+04      1.92e-05\npolygon 9              711  1.28815e+07      1.65e-02\npolygon 10 (hole)       36 -4.01660e+04     -5.14e-05\npolygon 11 (hole)      317 -5.11280e+04     -6.54e-05\npolygon 12 (hole)        3 -3.41405e-01     -4.37e-10\npolygon 13 (hole)        3 -2.89050e-05     -3.70e-14\npolygon 14              77  3.29939e+05      4.22e-04\npolygon 15              30  2.80002e+04      3.58e-05\npolygon 16 (hole)        3 -2.83151e-01     -3.62e-10\npolygon 17              71  8.18750e+03      1.05e-05\npolygon 18 (hole)        3 -1.68316e-04     -2.15e-13\npolygon 19 (hole)       36 -7.79904e+03     -9.97e-06\npolygon 20 (hole)        4 -2.05611e-02     -2.63e-11\npolygon 21 (hole)        3 -2.18000e-06     -2.79e-15\npolygon 22 (hole)        3 -3.65501e-03     -4.67e-12\npolygon 23 (hole)        3 -4.95057e-02     -6.33e-11\npolygon 24 (hole)        3 -3.99521e-02     -5.11e-11\npolygon 25 (hole)        3 -6.62377e-01     -8.47e-10\npolygon 26 (hole)        3 -2.09065e-03     -2.67e-12\npolygon 27              91  1.49663e+04      1.91e-05\npolygon 28 (hole)       26 -1.25665e+03     -1.61e-06\npolygon 29 (hole)      349 -1.21433e+03     -1.55e-06\npolygon 30 (hole)       20 -4.39069e+00     -5.62e-09\npolygon 31 (hole)       48 -1.38338e+02     -1.77e-07\npolygon 32 (hole)       28 -1.99862e+01     -2.56e-08\npolygon 33              40  1.38607e+04      1.77e-05\npolygon 34 (hole)       40 -6.00381e+03     -7.68e-06\npolygon 35 (hole)        7 -1.40545e-01     -1.80e-10\npolygon 36 (hole)       12 -8.36709e+01     -1.07e-07\npolygon 37              45  2.51218e+03      3.21e-06\npolygon 38             142  3.22293e+03      4.12e-06\npolygon 39             148  3.10395e+03      3.97e-06\npolygon 40              75  1.73526e+04      2.22e-05\npolygon 41              83  5.28920e+03      6.76e-06\npolygon 42             211  4.70521e+05      6.02e-04\npolygon 43             106  3.04104e+03      3.89e-06\npolygon 44             266  1.50631e+06      1.93e-03\npolygon 45              71  5.63061e+03      7.20e-06\npolygon 46              10  1.99717e+02      2.55e-07\npolygon 47             478  2.06120e+06      2.64e-03\npolygon 48             155  2.67502e+05      3.42e-04\npolygon 49            1027  1.27782e+06      1.63e-03\npolygon 50 (hole)        3 -1.16959e-03     -1.50e-12\npolygon 51              65  8.42861e+04      1.08e-04\npolygon 52              47  3.82087e+04      4.89e-05\npolygon 53               6  4.50259e+02      5.76e-07\npolygon 54             132  9.53357e+04      1.22e-04\npolygon 55 (hole)        3 -3.23310e-04     -4.13e-13\npolygon 56               4  2.69313e+02      3.44e-07\npolygon 57 (hole)        3 -1.46474e-03     -1.87e-12\npolygon 58            1045  4.44510e+06      5.68e-03\npolygon 59              22  6.74651e+03      8.63e-06\npolygon 60              64  3.43149e+04      4.39e-05\npolygon 61 (hole)        3 -1.98390e-03     -2.54e-12\npolygon 62 (hole)        4 -1.13774e-02     -1.46e-11\npolygon 63              14  5.86546e+03      7.50e-06\npolygon 64              95  5.96187e+04      7.62e-05\npolygon 65 (hole)        4 -1.86410e-02     -2.38e-11\npolygon 66 (hole)        3 -5.12482e-03     -6.55e-12\npolygon 67 (hole)        3 -1.96410e-03     -2.51e-12\npolygon 68 (hole)        3 -5.55856e-03     -7.11e-12\npolygon 69             234  2.08755e+06      2.67e-03\npolygon 70              10  4.90942e+02      6.28e-07\npolygon 71             234  4.72886e+05      6.05e-04\npolygon 72 (hole)       13 -3.91907e+02     -5.01e-07\npolygon 73              15  4.03300e+04      5.16e-05\npolygon 74             227  1.10308e+06      1.41e-03\npolygon 75              10  6.60195e+03      8.44e-06\npolygon 76              19  3.09221e+04      3.95e-05\npolygon 77             145  9.61782e+05      1.23e-03\npolygon 78              30  4.28933e+03      5.49e-06\npolygon 79              37  1.29481e+04      1.66e-05\npolygon 80               4  9.47108e+01      1.21e-07\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nKernel Density Estimation of Spatial Point Event\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, \n                                  1000, \n                                  \"km\")\n\nkde_childcareSG_adaptive &lt;- adaptive.density(\n  childcareSG_ppp.km, \n  method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nKernel Density Estimation sf method:\n\nlibrary(sp)\n\nWarning: package 'sp' was built under R version 4.2.3\n\n# Convert kde_childcareSG_adaptive to SpatialGridDataFrame using as()\ngridded_kde_childcareSG_ad &lt;- as(\n  kde_childcareSG_adaptive,\n  \"SpatialGridDataFrame\"\n)\n\n# Plot the KDE using spplot\nspplot(gridded_kde_childcareSG_ad)\n\n\n\n\n\n\n\n\nspatstat.geom method\n\ngridded_kde_childcareSG_ad &lt;- as(\n  kde_childcareSG_adaptive,\n  \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_ad)\n\n\n\n\n\n\n\n\nVisualising KDE using tmap\n\n# Load necessary libraries\nlibrary(sp)\nlibrary(raster)\n\n\nAttaching package: 'raster'\n\n\nThe following object is masked from 'package:nlme':\n\n    getData\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\n# Assuming kde_childcareSG_adaptive is in a compatible format (e.g., im or SpatialGridDataFrame)\n# Convert the KDE result to a raster (adjust based on your actual object type)\ngridded_kde_childcareSG_ad &lt;- as(kde_childcareSG_adaptive, \"SpatialGridDataFrame\")  # Convert to SpatialGridDataFrame\nkde_childcareSG_ad_raster &lt;- raster(gridded_kde_childcareSG_ad)  # Convert to raster\n\n# Now plot with tmap\ntm_shape(kde_childcareSG_ad_raster) + \n  tm_raster(palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE,\n            bg.color = \"#E4D5C9\")\n\nWarning: Currect projection of shape kde_childcareSG_ad_raster unknown. Long\nlat (epsg 4326) coordinates assumed.\n\n\n\n\n\n\n\n\n\nExtracting study area using sf objects\n\npg_owin &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\") %&gt;%\n  as.owin()\n\nchildcare_pg = childcare_ppp[pg_owin]\n\nplot(childcare_pg)  \n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 72 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\nMonte Carlo Simulation\n\nset.seed(1234)\n\nImporting Traffic Accident Data\n\n rdacc_sf &lt;- read.csv(\"data/thai_road_accident_2019_2022.csv\") %&gt;% filter(!is.na(longitude) & longitude != \"\", !is.na(latitude) & latitude != \"\") %&gt;% st_as_sf(coords = c( \"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs = 32647)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html",
    "title": "In_class_Ex01",
    "section": "",
    "text": "Getting Started\nInstall all needed packages\n\npacman::p_load(tidyverse, sf, tmap, ggstatsplot,dplyr)\n\nWorking with Master Plan Planning Sub-zone Data\n\nmpsz14_shp &lt;- st_read(dsn = \"data/\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nfile.exists(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n\n[1] TRUE\n\n\n\n#mpsz14_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\nmpsz14_kml &lt;- st_read(\"data/MP14_SUBZONE_WEB_PL.kml\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data/MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nst_write(mpsz14_shp, \n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\nWorking with Pre-school Location Data\n\npreschool_kml &lt;- st_read(\"data/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\npreschool_geojson &lt;- st_read(\"data/PreSchoolsLocation.geojson\") \n\nReading layer `PreSchoolsLocation' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data/PreSchoolsLocation.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nWorking with Master Plan 2019 Subzone Boundary Data\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nHandling Coordinate Systems\nChecking coordinate system\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nTransforming coordinate system\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/sharon/Desktop/ISSS626/ISSS626-VAA/In_class_Ex/In_class_Ex01/data/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nGeopatial Data Wrangling\nPoint-in-Polygon count\n\nmpsz19_shp &lt;- mpsz19_shp %&gt;%\n  mutate(`PreSch Count` = lengths(\n    st_intersects(mpsz19_shp, preschool)))\n\nComputing density\n\nmpsz19_shp &lt;- mpsz19_shp %&gt;%\n  mutate(Area = units::drop_units(\n    st_area(.)),\n    `PreSch Density` = `PreSch Count` / Area * 1000000\n  )\n\nStatistical Analysis\n\n# Initialize mpsz as a data frame with the converted columns from mpsz19_shp\nmpsz &lt;- data.frame(`PreSch Density` = as.numeric(as.character(mpsz19_shp$`PreSch Density`)),\n                   `PreSch Count` = as.numeric(as.character(mpsz19_shp$`PreSch Count`)))\n\n\nmpsz$`PreSch Density` &lt;- as.numeric(as.character(mpsz19_shp$`PreSch Density`))\nmpsz$`PreSch Count` &lt;- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) \nmpsz19_shp &lt;- as.data.frame(mpsz19_shp)\n\nggscatterstats(data = mpsz19_shp,\n               x = `PreSch Density`,\n               y = `PreSch Count`,\n               type = \"parametric\")\n\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n\n\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nWorking with Population Data\n\npopdata &lt;- read_csv(\"data/respopagesextod2023.csv\", show_col_types = FALSE)\n\nData Wrangling\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;% \n  summarise(`POP`=sum(`Pop`)) %&gt;%  \n  ungroup() %&gt;% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\nData Processing\n\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Check the column names to ensure they are correctly formatted\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  rename_with(~ gsub(\"-\", \"_\", .x)) \n\n# Use rowwise() to calculate YOUNG, AGED, ECONOMY ACTIVE, and DEPENDENCY\npopdata2023 &lt;- popdata2023 %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    # Calculate YOUNG: Sum of 0_to_4, 5_to_9, and 10_to_14 columns\n    YOUNG = sum(c_across(c(`0_to_4`, `5_to_9`, `10_to_14`)), na.rm = TRUE),\n    \n    # Calculate AGED: Sum of 65_to_69, 70_to_74, 75_to_79, 80_to_84, 85_to_89, 90_and_Over\n    AGED = sum(c_across(c(`65_to_69`, `70_to_74`, `75_to_79`, `80_to_84`, `85_to_89`, `90_and_Over`)), na.rm = TRUE),\n    \n    # Calculate ECONOMY ACTIVE: Sum of 15_to_19, 20_to_24, 25_to_29, ..., 60_to_64\n    `ECONOMY ACTIVE` = sum(c_across(c(`15_to_19`, `20_to_24`, `25_to_29`, `30_to_34`, \n                                      `35_to_39`, `40_to_44`, `45_to_49`, `50_to_54`, \n                                      `55_to_59`, `60_to_64`)), na.rm = TRUE),\n    \n    # Calculate DEPENDENCY ratio: (YOUNG + AGED) / ECONOMY ACTIVE\n    DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`\n  ) %&gt;%\n  ungroup()\n\nhead(popdata2023)\n\n# A tibble: 6 × 25\n  PA       SZ    `0_to_4` `10_to_14` `15_to_19` `20_to_24` `25_to_29` `30_to_34`\n  &lt;chr&gt;    &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 Ang Mo … Ang …      130        280        300        300        280        320\n2 Ang Mo … Chen…      870       1010       1090       1210       1580       1930\n3 Ang Mo … Chon…      700        890       1010       1230       1470       1730\n4 Ang Mo … Kebu…      620        860        970       1050       1240       1440\n5 Ang Mo … Semb…      200        390        430        480        500        390\n6 Ang Mo … Shan…      740        730        750        850       1040       1310\n# ℹ 17 more variables: `35_to_39` &lt;dbl&gt;, `40_to_44` &lt;dbl&gt;, `45_to_49` &lt;dbl&gt;,\n#   `50_to_54` &lt;dbl&gt;, `55_to_59` &lt;dbl&gt;, `5_to_9` &lt;dbl&gt;, `60_to_64` &lt;dbl&gt;,\n#   `65_to_69` &lt;dbl&gt;, `70_to_74` &lt;dbl&gt;, `75_to_79` &lt;dbl&gt;, `80_to_84` &lt;dbl&gt;,\n#   `85_to_89` &lt;dbl&gt;, `90_and_Over` &lt;dbl&gt;, YOUNG &lt;dbl&gt;, AGED &lt;dbl&gt;,\n#   `ECONOMY ACTIVE` &lt;dbl&gt;, DEPENDENCY &lt;dbl&gt;\n\n\nJoining popdata2023 and mpsz19_shp\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper))\n\nmpsz_pop2023 &lt;- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, \n                          by = c(\"SZ\" = \"SUBZONE_N\"))\n\nChoropleth Map of Dependency Ratio by Planning Subzone\nAnalytical Map: Percentile Map Step 1: Data Preparation\n\nmpsz_pop2023 &lt;- mpsz_pop2023 %&gt;%\n  drop_na()\n\nStep 2: The get function\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\nStep 3: A percentile mapping function\n\n# Ensure mpsz_pop2023 is an sf object (with geometry)\nif (!inherits(mpsz_pop2023, \"sf\")) {\n  # If geometry is missing, restore it from the original spatial data\n  mpsz_pop2023 &lt;- st_as_sf(mpsz_pop2023)\n}\n\n# Recreate the percentmap function to use correct objects\npercentmap &lt;- function(vnam, sf_object, legtitle = NA, mtitle = \"Percentile Map\") {\n  # Quantiles for percentiles\n  percent &lt;- c(0, .01, .1, .5, .9, .99, 1)\n  \n  # Access the column directly from the sf object\n  var &lt;- sf_object[[vnam]]\n  \n  # Calculate quantile breaks\n  bperc &lt;- quantile(var, percent, na.rm = TRUE)\n  \n  # Create the map using the spatial object\n  tm_shape(sf_object) +\n    tm_polygons(col = vnam, \n                title = legtitle, \n                breaks = bperc, \n                palette = \"Blues\",\n                labels = c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n    tm_borders() +\n    tm_layout(main.title = mtitle, \n              title.position = c(\"right\", \"bottom\"))\n}\n\nStep 4: Running the functions\n\nmpsz_pop2023 &lt;- sf::st_make_valid(mpsz_pop2023)\n\npercentmap(\"DEPENDENCY\", mpsz_pop2023)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpsz_pop2023,\n       aes(x = \"\",\n           y = DEPENDENCY)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nStep 1: Creating the boxbreaks function\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\nStep 2: Creating the get.var function\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\nStep 3: Boxmap function\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\nStep 4: Plotting Box Map\n\nboxmap(\"DEPENDENCY\", mpsz_pop2023)\n\n\n\n\n\n\n\n\nPlotting Interactive Box Map\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nboxmap(\"DEPENDENCY\", mpsz_pop2023)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]